---------------------STARTING SMITHY TESTS----------------------
TEST 1: ADDING 3 TREASURE CARDS
Current hand count: 6
Expected hand count: 7
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 2: CHECKING DECK COUNT 
Current deck count: 3
Expected deck count: 2
VALUES NOT EQUAL -- TEST 2 FAILED
----------------------SOME SMITHY TESTS FAILED-----------------------------------
---------------------STARTING ADVENTURER TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 8
Expected hand count: 6
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 3: ENSURE ONLY TREASURE CARDS ADDED
TEST 3 PASSED
----------------------SOME ADVENTURER TESTS FAILED-----------------------------------
---------------------STARTING GREAT HALL TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE ANOTHER ACTION
0
ASSERT FAILED - NOT GRANTED ANOTHER ACTION
----------------------SOME GREAT HALL TESTS FAILED-----------------------------------
---------------------STARTING VILLAGE CARD TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE TWO MORE ACTIONS
NUMBER OF ACTIONS LEFT: 3
TEST 3 PASSED
----------------------ALL VILLAGE CARD TESTS PASSED-----------------------
---------------------STARTING COMPARE TESTS----------------------
TEST 1: 20 GREATER THAN 80
TRUE - TEST PASSED
TEST2: 80 LESS THAN 20
TRUE - TEST PASSED
TEST3: 80 IS EQUAL TO 80
TRUE - TEST PASSED
----------------------ALL COMPARE TESTS PASSED-----------------------
---------------------STARTING NUMHANDCARD TESTS----------------------
TEST 1
STARTING GAME... EXPECTING 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 4 CARDS.
THERE ARE 4 CARDS
TEST PASSED
----------------------ALL NUMHANDCARD TESTS PASSED-----------------------
---------------------STARTING DRAWCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 6 CARDS.
THERE ARE 6 CARDS
TEST PASSED
TEST 3
ADDING 1 CARD. EXPECTING 7 CARDS.
THERE ARE 7 CARDS
TEST PASSED
----------------------ALL DRAWCARD TESTS PASSED-----------------------
---------------------STARTING DISCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
DISCARDING CARD. THERE SHOULD BE 4 CARDS NOW.
YOU HAVE 4 CARDS
DISCARDING CARD. THERE SHOULD BE 3 CARDS NOW.
YOU HAVE 3 CARDS
DISCARDING CARD. THERE SHOULD BE 2 CARDS NOW.
YOU HAVE 2 CARDS
DISCARDING CARD. THERE SHOULD BE 1 CARDS NOW.
YOU HAVE 1 CARDS
DISCARDING CARD. THERE SHOULD BE 0 CARDS NOW.
YOU HAVE 0 CARDS
TEST PASSED
----------------------ALL DISCARD TESTS PASSED-----------------------
File 'cardtest1.c'
Lines executed:96.77% of 31
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "SMITHY"
        -:   10:
        1:   11:int main() {
        -:   12:	//initial values to initialize game
        1:   13:	int seed = 99;
        -:   14:	struct gameState game;
        1:   15:	int choice1 = 1, 
        1:   16:		choice2 = 0, 
        1:   17:		choice3 = 0;
        1:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        1:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        1:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        1:   24:	int currentHandcount = game.handCount[0];
        1:   25:	int currentDeckCount = game.deckCount[0];
        1:   26:	int draw = 3;
        1:   27:	int discard = 1;
        -:   28:
        -:   29:
        1:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        1:   31:	printf("TEST 1: ADDING 3 TREASURE CARDS\n");
        1:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        1:   33:	int assertCount = 1;
        -:   34:
        1:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        1:   37:	cardEffect(smithy, choice1, choice2, choice3, &game, 0, 0);
        1:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        1:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        1:   40:		allAssertsPassed = 0;
        1:   41:	assertCount++;
        -:   42:
        1:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        1:   45:	printf("TEST 2: CHECKING DECK COUNT \n");
        1:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        1:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
        1:   48:		allAssertsPassed = 0;
        -:   49:
        1:   50:	if (allAssertsPassed)
    #####:   51:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   52:	else
        1:   53:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   54:
        1:   55:	return 0;
        -:   56:}
File 'cardtest2.c'
Lines executed:88.57% of 35
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "ADVENTURER"
        -:   10:
        1:   11:int main() {
        -:   12:	//initial values to initialize game
        1:   13:	int seed = 99;
        -:   14:	struct gameState game;
        1:   15:	int choice1 = 1,
        1:   16:		choice2 = 0,
        1:   17:		choice3 = 0;
        1:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        1:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        1:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        1:   24:	int currentHandcount = game.handCount[0];
        1:   25:	int currentDeckCount = game.deckCount[0];
        1:   26:	int draw = 2;
        1:   27:	int discard = 1;
        -:   28:
        -:   29:
        1:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        1:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        1:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        1:   33:	int assertCount = 1;
        -:   34:
        1:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        1:   37:	cardEffect(adventurer, choice1, choice2, choice3, &game, 0, 0);
        1:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        1:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        1:   40:		allAssertsPassed = 0;
        1:   41:	assertCount++;
        -:   42:
        1:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        -:   45:
        1:   46:	printf("TEST 3: ENSURE ONLY TREASURE CARDS ADDED\n");
        1:   47:	int cardDrawn = game.hand[0][game.handCount[0] - 1];
        1:   48:	int cardDrawn2 = game.hand[0][game.handCount[0] - 2];
        1:   49:	if ((cardDrawn != silver && cardDrawn != copper && cardDrawn != gold)
    #####:   50:		&& (cardDrawn2 != silver && cardDrawn2 != copper && cardDrawn2 != gold)) {
    #####:   51:		printf("ASSERT FAILED - NON-TREASURE CARD ADDED\n");
    #####:   52:		allAssertsPassed = 0;
        -:   53:	}
        -:   54:	else
        1:   55:		printf("TEST 3 PASSED\n");
        1:   56:	if (allAssertsPassed)
    #####:   57:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   58:	else
        1:   59:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   60:
        1:   61:	return 0;
        -:   62:}
File 'cardtest3.c'
Lines executed:89.19% of 37
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "GREAT HALL"
        -:   10:
        1:   11:int main() {
        -:   12:	//initial values to initialize game
        1:   13:	int seed = 99;
        -:   14:	struct gameState game;
        1:   15:	int choice1 = 1,
        1:   16:		choice2 = 0,
        1:   17:		choice3 = 0;
        1:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        1:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        1:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        1:   24:	int currentHandcount = game.handCount[0];
        1:   25:	int currentDeckCount = game.deckCount[0];
        1:   26:	int draw = 1;
        1:   27:	int discard = 1;
        -:   28:
        -:   29:
        1:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        1:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        1:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        1:   33:	int assertCount = 1;
        -:   34:
        1:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        1:   37:	cardEffect(great_hall, choice1, choice2, choice3, &game, 0, 0);
        1:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        1:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        1:   41:	assertCount++;
        -:   42:
        1:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        1:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        1:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        1:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        1:   50:	printf("TEST 3: ABLE TO MAKE ANOTHER ACTION\n");
        1:   51:	printf("%d\n", game.numActions);
        1:   52:	if (game.numActions < 1){
        1:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
        1:   54:		allAssertsPassed = 0;
        -:   55:	}
        -:   56:	else
    #####:   57:		printf("TEST 3 PASSED\n");
        -:   58:
        1:   59:	if (allAssertsPassed)
    #####:   60:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   61:	else
        1:   62:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   63:
        1:   64:	return 0;
        -:   65:}
File 'cardtest4.c'
Lines executed:86.49% of 37
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "VILLAGE CARD"
        -:   10:
        1:   11:int main() {
        -:   12:	//initial values to initialize game
        1:   13:	int seed = 99;
        -:   14:	struct gameState game;
        1:   15:	int choice1 = 1,
        1:   16:		choice2 = 0,
        1:   17:		choice3 = 0;
        1:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        1:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        1:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        1:   24:	int currentHandcount = game.handCount[0];
        1:   25:	int currentDeckCount = game.deckCount[0];
        1:   26:	int draw = 1;
        1:   27:	int discard = 1;
        -:   28:
        -:   29:
        1:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        1:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        1:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        1:   33:	int assertCount = 1;
        -:   34:
        1:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        1:   37:	cardEffect(village, choice1, choice2, choice3, &game, 0, 0);
        1:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        1:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        1:   41:	assertCount++;
        -:   42:
        1:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        1:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        1:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        1:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        1:   50:	printf("TEST 3: ABLE TO MAKE TWO MORE ACTIONS\n");
        1:   51:	printf("NUMBER OF ACTIONS LEFT: %d\n", game.numActions);
        1:   52:	if (game.numActions < 2) {
    #####:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
    #####:   54:		allAssertsPassed = 0;
        -:   55:
        -:   56:
        -:   57:	}
        -:   58:	else
        1:   59:		printf("TEST 3 PASSED\n");
        -:   60:
        1:   61:	if (allAssertsPassed)
        1:   62:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   63:	else
    #####:   64:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   65:
        1:   66:	return 0;
        -:   67:}
File 'unittest1.c'
Lines executed:74.07% of 27
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "COMPARE"
        -:   10:
        -:   11:
        1:   12:int main() {
        1:   13:	int eighty = 80;
        1:   14:	int twenty = 20;
        -:   15:
        1:   16:	int allAssertsPassed = 1;
        -:   17:
        1:   18:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        1:   19:	printf("TEST 1: 20 GREATER THAN 80\n");
        -:   20:	
        1:   21:	int t1 = compare(&eighty, &twenty);
        1:   22:	if (t1 == 1)
        1:   23:		printf("TRUE - TEST PASSED\n");
        -:   24:	else {
    #####:   25:		printf("FALSE - TEST FAILED\n");
    #####:   26:		allAssertsPassed = 0;
        -:   27:	}
        -:   28:
        1:   29:	printf("TEST2: 80 LESS THAN 20\n");
        1:   30:	t1 = compare(&twenty, &eighty);
        1:   31:	if (t1 == -1)
        1:   32:		printf("TRUE - TEST PASSED\n"); 
        -:   33:	else {
    #####:   34:		printf("FALSE - TEST FAILED\n");
    #####:   35:		allAssertsPassed = 0;
        -:   36:	}
        -:   37:	
        1:   38:	printf("TEST3: 80 IS EQUAL TO 80\n");
        1:   39:	t1 = compare(&twenty, &twenty);
        1:   40:	if (t1 == 0)
        1:   41:		printf("TRUE - TEST PASSED\n");
        -:   42:	else {
    #####:   43:		printf("FALSE - TEST FAILED\n");
    #####:   44:		allAssertsPassed = 0;
        -:   45:	}
        -:   46:
        1:   47:	if (allAssertsPassed)
        1:   48:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   49:	else
    #####:   50:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   51:
        1:   52:	return 0;
        -:   53:}
File 'unittest2.c'
Lines executed:80.77% of 26
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "NUMHANDCARD"
        -:   10:
        -:   11:
        1:   12:int main() {
        1:   13:	int allAssertsPassed = 1; 
        1:   14:	int seed = 99;
        -:   15:	struct gameState game;
        1:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        1:   17:	int numPlayers = 2;
        -:   18:
        1:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        1:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        1:   22:	printf("TEST 1\n");
        1:   23:	printf("STARTING GAME... EXPECTING 5 CARDS IN HAND.\n");
        1:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        1:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        1:   29:	else printf("TEST PASSED\n");
        -:   30:	
        1:   31:	printf("TEST 2\n");
        1:   32:	printf("ADDING 1 CARD. EXPECTING 4 CARDS.\n");
        1:   33:	discardCard(0, 0, &game, 0);
        1:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        1:   35:	if (game.handCount[0] != 4) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        1:   39:	else printf("TEST PASSED\n");
        1:   40:	if (allAssertsPassed)
        1:   41:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   42:	else
    #####:   43:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   44:
        1:   45:	return 0;
        -:   46:}
File 'unittest3.c'
Lines executed:79.41% of 34
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DRAWCARD"
        -:   10:
        -:   11:
        1:   12:int main() {
        1:   13:	int allAssertsPassed = 1;
        1:   14:	int seed = 99;
        -:   15:	struct gameState game;
        1:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        1:   17:	int numPlayers = 2;
        -:   18:
        1:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        1:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        1:   22:	printf("TEST 1\n");
        1:   23:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        1:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        1:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        1:   29:	else printf("TEST PASSED\n");
        -:   30:
        1:   31:	printf("TEST 2\n");
        1:   32:	printf("ADDING 1 CARD. EXPECTING 6 CARDS.\n");
        1:   33:	drawCard(0, &game);
        1:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        1:   35:	if (game.handCount[0] != 6) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        1:   39:	else printf("TEST PASSED\n");
        -:   40:
        1:   41:	printf("TEST 3\n");
        1:   42:	printf("ADDING 1 CARD. EXPECTING 7 CARDS.\n");
        1:   43:	drawCard(0, &game);
        1:   44:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        1:   45:	if (game.handCount[0] != 7) {
    #####:   46:		allAssertsPassed = 0;
    #####:   47:		printf("TEST FAILED\n");
        -:   48:	}
        1:   49:	else printf("TEST PASSED\n");
        -:   50:
        1:   51:	if (allAssertsPassed)
        1:   52:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   53:	else
    #####:   54:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   55:
        1:   56:	return 0;
        -:   57:}
File 'unittest4.c'
Lines executed:88.46% of 26
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DISCARD"
        -:   10:
        1:   11:int main() {
        1:   12:	int allAssertsPassed = 1;
        1:   13:	int seed = 99;
        -:   14:	struct gameState game;
        1:   15:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        1:   16:	int numPlayers = 2;
        -:   17:
        1:   18:	initializeGame(numPlayers, k, seed, &game);
        -:   19:
        1:   20:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        1:   21:	printf("TEST 1\n");
        1:   22:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        1:   23:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        -:   24:	
        1:   25:	int expected = 4;
        1:   26:	int sameVal = 1;
        -:   27:
        7:   28:	while (game.handCount[0] > 0) {
        5:   29:		printf("DISCARDING CARD. THERE SHOULD BE %d CARDS NOW.\n", expected);
        5:   30:		discardCard(0, 0, &game, 0);
        5:   31:		printf("YOU HAVE %d CARDS\n", game.handCount[0]);
        5:   32:		if (game.handCount[0] != expected) {
    #####:   33:			sameVal = 0;
    #####:   34:			allAssertsPassed = 0;
        -:   35:		}
        5:   36:		expected--;
        -:   37:
        -:   38:	}
        -:   39:
        1:   40:	if (sameVal)
        1:   41:		printf("TEST PASSED\n");
        -:   42:
        1:   43:	if (allAssertsPassed)
        1:   44:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   45:	else
    #####:   46:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   47:
        1:   48:	return 0;
        -:   49:}
---------------------STARTING SMITHY TESTS----------------------
TEST 1: ADDING 3 TREASURE CARDS
Current hand count: 6
Expected hand count: 7
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 2: CHECKING DECK COUNT 
Current deck count: 3
Expected deck count: 2
VALUES NOT EQUAL -- TEST 2 FAILED
----------------------SOME SMITHY TESTS FAILED-----------------------------------
---------------------STARTING ADVENTURER TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 8
Expected hand count: 6
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 3: ENSURE ONLY TREASURE CARDS ADDED
TEST 3 PASSED
----------------------SOME ADVENTURER TESTS FAILED-----------------------------------
---------------------STARTING GREAT HALL TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE ANOTHER ACTION
0
ASSERT FAILED - NOT GRANTED ANOTHER ACTION
----------------------SOME GREAT HALL TESTS FAILED-----------------------------------
---------------------STARTING VILLAGE CARD TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE TWO MORE ACTIONS
NUMBER OF ACTIONS LEFT: 3
TEST 3 PASSED
----------------------ALL VILLAGE CARD TESTS PASSED-----------------------
---------------------STARTING COMPARE TESTS----------------------
TEST 1: 20 GREATER THAN 80
TRUE - TEST PASSED
TEST2: 80 LESS THAN 20
TRUE - TEST PASSED
TEST3: 80 IS EQUAL TO 80
TRUE - TEST PASSED
----------------------ALL COMPARE TESTS PASSED-----------------------
---------------------STARTING NUMHANDCARD TESTS----------------------
TEST 1
STARTING GAME... EXPECTING 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 4 CARDS.
THERE ARE 4 CARDS
TEST PASSED
----------------------ALL NUMHANDCARD TESTS PASSED-----------------------
---------------------STARTING DRAWCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 6 CARDS.
THERE ARE 6 CARDS
TEST PASSED
TEST 3
ADDING 1 CARD. EXPECTING 7 CARDS.
THERE ARE 7 CARDS
TEST PASSED
----------------------ALL DRAWCARD TESTS PASSED-----------------------
---------------------STARTING DISCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
DISCARDING CARD. THERE SHOULD BE 4 CARDS NOW.
YOU HAVE 4 CARDS
DISCARDING CARD. THERE SHOULD BE 3 CARDS NOW.
YOU HAVE 3 CARDS
DISCARDING CARD. THERE SHOULD BE 2 CARDS NOW.
YOU HAVE 2 CARDS
DISCARDING CARD. THERE SHOULD BE 1 CARDS NOW.
YOU HAVE 1 CARDS
DISCARDING CARD. THERE SHOULD BE 0 CARDS NOW.
YOU HAVE 0 CARDS
TEST PASSED
----------------------ALL DISCARD TESTS PASSED-----------------------
File 'cardtest1.c'
Lines executed:96.77% of 31
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "SMITHY"
        -:   10:
        2:   11:int main() {
        -:   12:	//initial values to initialize game
        2:   13:	int seed = 99;
        -:   14:	struct gameState game;
        2:   15:	int choice1 = 1, 
        2:   16:		choice2 = 0, 
        2:   17:		choice3 = 0;
        2:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        2:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        2:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        2:   24:	int currentHandcount = game.handCount[0];
        2:   25:	int currentDeckCount = game.deckCount[0];
        2:   26:	int draw = 3;
        2:   27:	int discard = 1;
        -:   28:
        -:   29:
        2:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        2:   31:	printf("TEST 1: ADDING 3 TREASURE CARDS\n");
        2:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        2:   33:	int assertCount = 1;
        -:   34:
        2:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        2:   37:	cardEffect(smithy, choice1, choice2, choice3, &game, 0, 0);
        2:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        2:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        2:   40:		allAssertsPassed = 0;
        2:   41:	assertCount++;
        -:   42:
        2:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        2:   45:	printf("TEST 2: CHECKING DECK COUNT \n");
        2:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        2:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
        2:   48:		allAssertsPassed = 0;
        -:   49:
        2:   50:	if (allAssertsPassed)
    #####:   51:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   52:	else
        2:   53:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   54:
        2:   55:	return 0;
        -:   56:}
File 'cardtest2.c'
Lines executed:88.57% of 35
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "ADVENTURER"
        -:   10:
        2:   11:int main() {
        -:   12:	//initial values to initialize game
        2:   13:	int seed = 99;
        -:   14:	struct gameState game;
        2:   15:	int choice1 = 1,
        2:   16:		choice2 = 0,
        2:   17:		choice3 = 0;
        2:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        2:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        2:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        2:   24:	int currentHandcount = game.handCount[0];
        2:   25:	int currentDeckCount = game.deckCount[0];
        2:   26:	int draw = 2;
        2:   27:	int discard = 1;
        -:   28:
        -:   29:
        2:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        2:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        2:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        2:   33:	int assertCount = 1;
        -:   34:
        2:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        2:   37:	cardEffect(adventurer, choice1, choice2, choice3, &game, 0, 0);
        2:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        2:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        2:   40:		allAssertsPassed = 0;
        2:   41:	assertCount++;
        -:   42:
        2:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        -:   45:
        2:   46:	printf("TEST 3: ENSURE ONLY TREASURE CARDS ADDED\n");
        2:   47:	int cardDrawn = game.hand[0][game.handCount[0] - 1];
        2:   48:	int cardDrawn2 = game.hand[0][game.handCount[0] - 2];
        2:   49:	if ((cardDrawn != silver && cardDrawn != copper && cardDrawn != gold)
    #####:   50:		&& (cardDrawn2 != silver && cardDrawn2 != copper && cardDrawn2 != gold)) {
    #####:   51:		printf("ASSERT FAILED - NON-TREASURE CARD ADDED\n");
    #####:   52:		allAssertsPassed = 0;
        -:   53:	}
        -:   54:	else
        2:   55:		printf("TEST 3 PASSED\n");
        2:   56:	if (allAssertsPassed)
    #####:   57:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   58:	else
        2:   59:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   60:
        2:   61:	return 0;
        -:   62:}
File 'cardtest3.c'
Lines executed:89.19% of 37
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "GREAT HALL"
        -:   10:
        2:   11:int main() {
        -:   12:	//initial values to initialize game
        2:   13:	int seed = 99;
        -:   14:	struct gameState game;
        2:   15:	int choice1 = 1,
        2:   16:		choice2 = 0,
        2:   17:		choice3 = 0;
        2:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        2:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        2:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        2:   24:	int currentHandcount = game.handCount[0];
        2:   25:	int currentDeckCount = game.deckCount[0];
        2:   26:	int draw = 1;
        2:   27:	int discard = 1;
        -:   28:
        -:   29:
        2:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        2:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        2:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        2:   33:	int assertCount = 1;
        -:   34:
        2:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        2:   37:	cardEffect(great_hall, choice1, choice2, choice3, &game, 0, 0);
        2:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        2:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        2:   41:	assertCount++;
        -:   42:
        2:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        2:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        2:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        2:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        2:   50:	printf("TEST 3: ABLE TO MAKE ANOTHER ACTION\n");
        2:   51:	printf("%d\n", game.numActions);
        2:   52:	if (game.numActions < 1){
        2:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
        2:   54:		allAssertsPassed = 0;
        -:   55:	}
        -:   56:	else
    #####:   57:		printf("TEST 3 PASSED\n");
        -:   58:
        2:   59:	if (allAssertsPassed)
    #####:   60:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   61:	else
        2:   62:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   63:
        2:   64:	return 0;
        -:   65:}
File 'cardtest4.c'
Lines executed:86.49% of 37
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "VILLAGE CARD"
        -:   10:
        2:   11:int main() {
        -:   12:	//initial values to initialize game
        2:   13:	int seed = 99;
        -:   14:	struct gameState game;
        2:   15:	int choice1 = 1,
        2:   16:		choice2 = 0,
        2:   17:		choice3 = 0;
        2:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        2:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        2:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        2:   24:	int currentHandcount = game.handCount[0];
        2:   25:	int currentDeckCount = game.deckCount[0];
        2:   26:	int draw = 1;
        2:   27:	int discard = 1;
        -:   28:
        -:   29:
        2:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        2:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        2:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        2:   33:	int assertCount = 1;
        -:   34:
        2:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        2:   37:	cardEffect(village, choice1, choice2, choice3, &game, 0, 0);
        2:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        2:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        2:   41:	assertCount++;
        -:   42:
        2:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        2:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        2:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        2:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        2:   50:	printf("TEST 3: ABLE TO MAKE TWO MORE ACTIONS\n");
        2:   51:	printf("NUMBER OF ACTIONS LEFT: %d\n", game.numActions);
        2:   52:	if (game.numActions < 2) {
    #####:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
    #####:   54:		allAssertsPassed = 0;
        -:   55:
        -:   56:
        -:   57:	}
        -:   58:	else
        2:   59:		printf("TEST 3 PASSED\n");
        -:   60:
        2:   61:	if (allAssertsPassed)
        2:   62:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   63:	else
    #####:   64:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   65:
        2:   66:	return 0;
        -:   67:}
File 'unittest1.c'
Lines executed:74.07% of 27
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "COMPARE"
        -:   10:
        -:   11:
        2:   12:int main() {
        2:   13:	int eighty = 80;
        2:   14:	int twenty = 20;
        -:   15:
        2:   16:	int allAssertsPassed = 1;
        -:   17:
        2:   18:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        2:   19:	printf("TEST 1: 20 GREATER THAN 80\n");
        -:   20:	
        2:   21:	int t1 = compare(&eighty, &twenty);
        2:   22:	if (t1 == 1)
        2:   23:		printf("TRUE - TEST PASSED\n");
        -:   24:	else {
    #####:   25:		printf("FALSE - TEST FAILED\n");
    #####:   26:		allAssertsPassed = 0;
        -:   27:	}
        -:   28:
        2:   29:	printf("TEST2: 80 LESS THAN 20\n");
        2:   30:	t1 = compare(&twenty, &eighty);
        2:   31:	if (t1 == -1)
        2:   32:		printf("TRUE - TEST PASSED\n"); 
        -:   33:	else {
    #####:   34:		printf("FALSE - TEST FAILED\n");
    #####:   35:		allAssertsPassed = 0;
        -:   36:	}
        -:   37:	
        2:   38:	printf("TEST3: 80 IS EQUAL TO 80\n");
        2:   39:	t1 = compare(&twenty, &twenty);
        2:   40:	if (t1 == 0)
        2:   41:		printf("TRUE - TEST PASSED\n");
        -:   42:	else {
    #####:   43:		printf("FALSE - TEST FAILED\n");
    #####:   44:		allAssertsPassed = 0;
        -:   45:	}
        -:   46:
        2:   47:	if (allAssertsPassed)
        2:   48:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   49:	else
    #####:   50:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   51:
        2:   52:	return 0;
        -:   53:}
File 'unittest2.c'
Lines executed:80.77% of 26
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "NUMHANDCARD"
        -:   10:
        -:   11:
        2:   12:int main() {
        2:   13:	int allAssertsPassed = 1; 
        2:   14:	int seed = 99;
        -:   15:	struct gameState game;
        2:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        2:   17:	int numPlayers = 2;
        -:   18:
        2:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        2:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        2:   22:	printf("TEST 1\n");
        2:   23:	printf("STARTING GAME... EXPECTING 5 CARDS IN HAND.\n");
        2:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        2:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        2:   29:	else printf("TEST PASSED\n");
        -:   30:	
        2:   31:	printf("TEST 2\n");
        2:   32:	printf("ADDING 1 CARD. EXPECTING 4 CARDS.\n");
        2:   33:	discardCard(0, 0, &game, 0);
        2:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        2:   35:	if (game.handCount[0] != 4) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        2:   39:	else printf("TEST PASSED\n");
        2:   40:	if (allAssertsPassed)
        2:   41:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   42:	else
    #####:   43:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   44:
        2:   45:	return 0;
        -:   46:}
File 'unittest3.c'
Lines executed:79.41% of 34
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DRAWCARD"
        -:   10:
        -:   11:
        2:   12:int main() {
        2:   13:	int allAssertsPassed = 1;
        2:   14:	int seed = 99;
        -:   15:	struct gameState game;
        2:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        2:   17:	int numPlayers = 2;
        -:   18:
        2:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        2:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        2:   22:	printf("TEST 1\n");
        2:   23:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        2:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        2:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        2:   29:	else printf("TEST PASSED\n");
        -:   30:
        2:   31:	printf("TEST 2\n");
        2:   32:	printf("ADDING 1 CARD. EXPECTING 6 CARDS.\n");
        2:   33:	drawCard(0, &game);
        2:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        2:   35:	if (game.handCount[0] != 6) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        2:   39:	else printf("TEST PASSED\n");
        -:   40:
        2:   41:	printf("TEST 3\n");
        2:   42:	printf("ADDING 1 CARD. EXPECTING 7 CARDS.\n");
        2:   43:	drawCard(0, &game);
        2:   44:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        2:   45:	if (game.handCount[0] != 7) {
    #####:   46:		allAssertsPassed = 0;
    #####:   47:		printf("TEST FAILED\n");
        -:   48:	}
        2:   49:	else printf("TEST PASSED\n");
        -:   50:
        2:   51:	if (allAssertsPassed)
        2:   52:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   53:	else
    #####:   54:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   55:
        2:   56:	return 0;
        -:   57:}
File 'unittest4.c'
Lines executed:88.46% of 26
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DISCARD"
        -:   10:
        2:   11:int main() {
        2:   12:	int allAssertsPassed = 1;
        2:   13:	int seed = 99;
        -:   14:	struct gameState game;
        2:   15:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        2:   16:	int numPlayers = 2;
        -:   17:
        2:   18:	initializeGame(numPlayers, k, seed, &game);
        -:   19:
        2:   20:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        2:   21:	printf("TEST 1\n");
        2:   22:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        2:   23:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        -:   24:	
        2:   25:	int expected = 4;
        2:   26:	int sameVal = 1;
        -:   27:
       14:   28:	while (game.handCount[0] > 0) {
       10:   29:		printf("DISCARDING CARD. THERE SHOULD BE %d CARDS NOW.\n", expected);
       10:   30:		discardCard(0, 0, &game, 0);
       10:   31:		printf("YOU HAVE %d CARDS\n", game.handCount[0]);
       10:   32:		if (game.handCount[0] != expected) {
    #####:   33:			sameVal = 0;
    #####:   34:			allAssertsPassed = 0;
        -:   35:		}
       10:   36:		expected--;
        -:   37:
        -:   38:	}
        -:   39:
        2:   40:	if (sameVal)
        2:   41:		printf("TEST PASSED\n");
        -:   42:
        2:   43:	if (allAssertsPassed)
        2:   44:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   45:	else
    #####:   46:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   47:
        2:   48:	return 0;
        -:   49:}
File 'dominion.c'
Lines executed:24.33% of 522
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
      426:    9:int compare(const void* a, const void* b) {
      426:   10:  if (*(int*)a > *(int*)b)
        2:   11:    return 1;
      424:   12:  if (*(int*)a < *(int*)b)
      114:   13:    return -1;
      310:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
       14:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
       14:   45:  SelectStream(1);
       14:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       14:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       14:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      154:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     1540:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     1400:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       14:   74:  if (numPlayers == 2)
        -:   75:    {
       14:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       14:   88:  if (numPlayers == 2)
        -:   89:    {
       14:   90:      state->supplyCount[estate] = 8;
       14:   91:      state->supplyCount[duchy] = 8;
       14:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       14:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  103:  state->supplyCount[silver] = 40;
       14:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      294:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     2310:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
     2170:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      140:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       28:  116:		  if (numPlayers == 2){ 
       14:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
      126:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      140:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     2030:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       42:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       28:  141:      state->deckCount[i] = 0;
      112:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       84:  144:	  state->deck[i][j] = estate;
       84:  145:	  state->deckCount[i]++;
        -:  146:	}
      224:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
      196:  149:	  state->deck[i][j] = copper;
      196:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       42:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       28:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
       42:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       28:  167:      state->handCount[i] = 0;
       28:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      392:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      378:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       14:  183:  state->outpostPlayed = 0;
       14:  184:  state->phase = 0;
       14:  185:  state->numActions = 1;
       14:  186:  state->numBuys = 1;
       14:  187:  state->playedCardCount = 0;
       14:  188:  state->whoseTurn = 0;
       14:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
       84:  193:  for (it = 0; it < 5; it++){
       70:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
       14:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
       14:  199:  return 0;
        -:  200:}
        -:  201:
       28:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       28:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       28:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       28:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      336:  214:  while (state->deckCount[player] > 0) {
      280:  215:    card = floor(Random() * state->deckCount[player]);
      280:  216:    newDeck[newDeckPos] = state->deck[player][card];
      280:  217:    newDeckPos++;
      868:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      588:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      280:  221:    state->deckCount[player]--;
        -:  222:  }
      308:  223:  for (i = 0; i < newDeckPos; i++) {
      280:  224:    state->deck[player][i] = newDeck[i];
      280:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       28:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        8:  346:int whoseTurn(struct gameState *state) {
        8:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       90:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       90:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       90:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       90:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       90:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       90:  576:    state->deckCount[player]--;
       90:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       90:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        8:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        8:  653:  int currentPlayer = whoseTurn(state);
        8:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        8:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        8:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        8:  660:  int z = 0;// this is the counter for the temp hand
        8:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  //uses switch to select card and perform actions
        8:  665:  switch( card ) 
        -:  666:    {
        -:  667:    case adventurer:
        2:  668:		adventurerCard(drawntreasure, currentPlayer, state);
        2:  669:      return 0;
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
        -:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
        -:  687:	    }
        -:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
    #####:  708:	if (supplyCount(choice1, state) <= 0){
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
        -:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
        -:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
        -:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  753:
    #####:  754:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  755:	{
    #####:  756:	  return -1;
        -:  757:	}
        -:  758:		
    #####:  759:      if (choice2 > treasure_map || choice2 < curse)
        -:  760:	{
    #####:  761:	  return -1;
        -:  762:	}
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 2, currentPlayer);
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:			
    #####:  784:      return 0;
        -:  785:			
        -:  786:    case remodel:
    #####:  787:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  788:
    #####:  789:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      gainCard(choice2, state, 0, currentPlayer);
        -:  795:
        -:  796:      //discard card from hand
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
        -:  798:
        -:  799:      //discard trashed card
    #####:  800:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  801:	{
    #####:  802:	  if (state->hand[currentPlayer][i] == j)
        -:  803:	    {
    #####:  804:	      discardCard(i, currentPlayer, state, 0);			
    #####:  805:	      break;
        -:  806:	    }
        -:  807:	}
        -:  808:
        -:  809:
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case smithy:
        2:  813:		smithyCard(handPos, currentPlayer, state);
        2:  814:      return 0;
        -:  815:	
        -:  816:
        -:  817:    case village:
        2:  818:		villageCard(handPos, currentPlayer, state);
        2:  819:      return 0;
        -:  820:		
        -:  821:    case baron:
    #####:  822:      state->numBuys++;//Increase buys by 1!
    #####:  823:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  824:	int p = 0;//Iterator for hand!
    #####:  825:	int card_not_discarded = 1;//Flag for discard set!
    #####:  826:	while(card_not_discarded){
    #####:  827:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  828:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  829:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  830:	    state->discardCount[currentPlayer]++;
    #####:  831:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  832:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  833:	    }
    #####:  834:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  835:	    state->handCount[currentPlayer]--;
    #####:  836:	    card_not_discarded = 0;//Exit the loop
        -:  837:	  }
    #####:  838:	  else if (p > state->handCount[currentPlayer]){
        -:  839:	    if(DEBUG) {
        -:  840:	      printf("No estate cards in your hand, invalid choice\n");
        -:  841:	      printf("Must gain an estate if there are any\n");
        -:  842:	    }
    #####:  843:	    if (supplyCount(estate, state) > 0){
    #####:  844:	      gainCard(estate, state, 0, currentPlayer);
    #####:  845:	      state->supplyCount[estate]--;//Decrement estates
    #####:  846:	      if (supplyCount(estate, state) == 0){
    #####:  847:		isGameOver(state);
        -:  848:	      }
        -:  849:	    }
    #####:  850:	    card_not_discarded = 0;//Exit the loop
        -:  851:	  }
        -:  852:			    
        -:  853:	  else{
    #####:  854:	    p++;//Next card
        -:  855:	  }
        -:  856:	}
        -:  857:      }
        -:  858:			    
        -:  859:      else{
    #####:  860:	if (supplyCount(estate, state) > 0){
    #####:  861:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  862:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  863:	  if (supplyCount(estate, state) == 0){
    #####:  864:	    isGameOver(state);
        -:  865:	  }
        -:  866:	}
        -:  867:      }
        -:  868:	    
        -:  869:      
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case great_hall:
        2:  873:		greatHallCard(handPos, currentPlayer, state);
        2:  874:      return 0;
        -:  875:		
        -:  876:    case minion:
    #####:  877:		minionCard(choice1, choice2, handPos, currentPlayer, state);
    #####:  878:        return 0;
        -:  879:		
        -:  880:    case steward:
    #####:  881:      if (choice1 == 1)
        -:  882:	{
        -:  883:	  //+2 cards
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	  drawCard(currentPlayer, state);
        -:  886:	}
    #####:  887:      else if (choice1 == 2)
        -:  888:	{
        -:  889:	  //+2 coins
    #####:  890:	  state->coins = state->coins + 2;
        -:  891:	}
        -:  892:      else
        -:  893:	{
        -:  894:	  //trash 2 cards in hand
    #####:  895:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  896:	  discardCard(choice3, currentPlayer, state, 1);
        -:  897:	}
        -:  898:			
        -:  899:      //discard card from hand
    #####:  900:      discardCard(handPos, currentPlayer, state, 0);
    #####:  901:      return 0;
        -:  902:		
        -:  903:    case tribute:
    #####:  904:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  905:	if (state->deckCount[nextPlayer] > 0){
    #####:  906:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  907:	  state->deckCount[nextPlayer]--;
        -:  908:	}
    #####:  909:	else if (state->discardCount[nextPlayer] > 0){
    #####:  910:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  911:	  state->discardCount[nextPlayer]--;
        -:  912:	}
        -:  913:	else{
        -:  914:	  //No Card to Reveal
        -:  915:	  if (DEBUG){
        -:  916:	    printf("No cards to reveal\n");
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:	    
        -:  921:      else{
    #####:  922:	if (state->deckCount[nextPlayer] == 0){
    #####:  923:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  924:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  925:	    state->deckCount[nextPlayer]++;
    #####:  926:	    state->discard[nextPlayer][i] = -1;
    #####:  927:	    state->discardCount[nextPlayer]--;
        -:  928:	  }
        -:  929:			    
    #####:  930:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  931:	} 
    #####:  932:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  934:	state->deckCount[nextPlayer]--;
    #####:  935:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
        -:  938:      }    
        -:  939:		       
    #####:  940:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  941:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  942:	state->playedCardCount++;
    #####:  943:	tributeRevealedCards[1] = -1;
        -:  944:      }
        -:  945:
    #####:  946:      for (i = 0; i <= 2; i ++){
    #####:  947:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  948:	  state->coins += 2;
        -:  949:	}
        -:  950:		    
    #####:  951:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	  drawCard(currentPlayer, state);
        -:  954:	}
        -:  955:	else{//Action Card
    #####:  956:	  state->numActions = state->numActions + 2;
        -:  957:	}
        -:  958:      }
        -:  959:	    
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case ambassador:
    #####:  963:      j = 0;		//used to check if player has enough cards to discard
        -:  964:
    #####:  965:      if (choice2 > 2 || choice2 < 0)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
    #####:  970:      if (choice1 == handPos)
        -:  971:	{
    #####:  972:	  return -1;
        -:  973:	}
        -:  974:
    #####:  975:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  976:	{
    #####:  977:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  978:	    {
    #####:  979:	      j++;
        -:  980:	    }
        -:  981:	}
    #####:  982:      if (j < choice2)
        -:  983:	{
    #####:  984:	  return -1;				
        -:  985:	}
        -:  986:
        -:  987:      if (DEBUG) 
        -:  988:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  989:
        -:  990:      //increase supply count for choosen card by amount being discarded
    #####:  991:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  992:			
        -:  993:      //each other player gains a copy of revealed card
    #####:  994:      for (i = 0; i < state->numPlayers; i++)
        -:  995:	{
    #####:  996:	  if (i != currentPlayer)
        -:  997:	    {
    #####:  998:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  999:	    }
        -: 1000:	}
        -: 1001:
        -: 1002:      //discard played card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1004:
        -: 1005:      //trash copies of cards returned to supply
    #####: 1006:      for (j = 0; j < choice2; j++)
        -: 1007:	{
    #####: 1008:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1009:	    {
    #####: 1010:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1011:		{
    #####: 1012:		  discardCard(i, currentPlayer, state, 1);
    #####: 1013:		  break;
        -: 1014:		}
        -: 1015:	    }
        -: 1016:	}			
        -: 1017:
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case cutpurse:
        -: 1021:
    #####: 1022:      updateCoins(currentPlayer, state, 2);
    #####: 1023:      for (i = 0; i < state->numPlayers; i++)
        -: 1024:	{
    #####: 1025:	  if (i != currentPlayer)
        -: 1026:	    {
    #####: 1027:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1028:		{
    #####: 1029:		  if (state->hand[i][j] == copper)
        -: 1030:		    {
    #####: 1031:		      discardCard(j, i, state, 0);
    #####: 1032:		      break;
        -: 1033:		    }
    #####: 1034:		  if (j == state->handCount[i])
        -: 1035:		    {
    #####: 1036:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1037:			{
        -: 1038:			  if (DEBUG)
        -: 1039:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1040:			}	
    #####: 1041:		      break;
        -: 1042:		    }		
        -: 1043:		}
        -: 1044:					
        -: 1045:	    }
        -: 1046:				
        -: 1047:	}				
        -: 1048:
        -: 1049:      //discard played card from hand
    #####: 1050:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1051:
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:		
        -: 1055:    case embargo: 
        -: 1056:      //+2 Coins
    #####: 1057:      state->coins = state->coins + 2;
        -: 1058:			
        -: 1059:      //see if selected pile is in play
    #####: 1060:      if ( state->supplyCount[choice1] == -1 )
        -: 1061:	{
    #####: 1062:	  return -1;
        -: 1063:	}
        -: 1064:			
        -: 1065:      //add embargo token to selected supply pile
    #####: 1066:      state->embargoTokens[choice1]++;
        -: 1067:			
        -: 1068:      //trash card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case outpost:
        -: 1073:      //set outpost flag
    #####: 1074:      state->outpostPlayed++;
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case salvager:
        -: 1081:      //+1 buy
    #####: 1082:      state->numBuys++;
        -: 1083:			
    #####: 1084:      if (choice1)
        -: 1085:	{
        -: 1086:	  //gain coins equal to trashed card
    #####: 1087:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1088:	  //trash card
    #####: 1089:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1090:	}
        -: 1091:			
        -: 1092:      //discard card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case sea_hag:
    #####: 1097:      for (i = 0; i < state->numPlayers; i++){
    #####: 1098:	if (i != currentPlayer){
    #####: 1099:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1100:	  state->discardCount[i]++;
    #####: 1101:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1102:	}
        -: 1103:      }
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case treasure_map:
        -: 1107:      //search hand for another treasure_map
    #####: 1108:      index = -1;
    #####: 1109:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1110:	{
    #####: 1111:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1112:	    {
    #####: 1113:	      index = i;
    #####: 1114:	      break;
        -: 1115:	    }
        -: 1116:	}
    #####: 1117:      if (index > -1)
        -: 1118:	{
        -: 1119:	  //trash both treasure cards
    #####: 1120:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1121:	  discardCard(index, currentPlayer, state, 1);
        -: 1122:
        -: 1123:	  //gain 4 Gold cards
    #####: 1124:	  for (i = 0; i < 4; i++)
        -: 1125:	    {
    #####: 1126:	      gainCard(gold, state, 1, currentPlayer);
        -: 1127:	    }
        -: 1128:				
        -: 1129:	  //return success
    #####: 1130:	  return 1;
        -: 1131:	}
        -: 1132:			
        -: 1133:      //no second treasure_map found in hand
    #####: 1134:      return -1;
        -: 1135:    }
        -: 1136:	
    #####: 1137:  return -1;
        -: 1138:}
        -: 1139:
        -: 1140:
       18: 1141:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -: 1142:	
        -: 1143:  //if card is not trashed, added to Played pile 
       18: 1144:  if (trashFlag < 1)
        -: 1145:    {
        -: 1146:      //add card to played pile
       18: 1147:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       18: 1148:      state->playedCardCount++;
        -: 1149:    }
        -: 1150:	
        -: 1151:  //set played card to -1
       18: 1152:  state->hand[currentPlayer][handPos] = -1;
        -: 1153:	
        -: 1154:  //remove card from player's hand
       18: 1155:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
        2: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
       16: 1160:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1161:    {
        -: 1162:      //reduce number of cards in hand
    #####: 1163:      state->handCount[currentPlayer]--;
        -: 1164:    }
        -: 1165:  else 	
        -: 1166:    {
        -: 1167:      //replace discarded card with last card in hand
       16: 1168:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1169:      //set last card to -1
       16: 1170:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1171:      //reduce number of cards in hand
       16: 1172:      state->handCount[currentPlayer]--;
        -: 1173:    }
        -: 1174:	
       18: 1175:  return 0;
        -: 1176:}
        -: 1177:
    #####: 1178:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1179:{
        -: 1180:  //Note: supplyPos is enum of choosen card
        -: 1181:	
        -: 1182:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1183:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1184:    {
    #####: 1185:      return -1;
        -: 1186:    }
        -: 1187:	
        -: 1188:  //added card for [whoseTurn] current player:
        -: 1189:  // toFlag = 0 : add to discard
        -: 1190:  // toFlag = 1 : add to deck
        -: 1191:  // toFlag = 2 : add to hand
        -: 1192:
    #####: 1193:  if (toFlag == 1)
        -: 1194:    {
    #####: 1195:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1196:      state->deckCount[player]++;
        -: 1197:    }
    #####: 1198:  else if (toFlag == 2)
        -: 1199:    {
    #####: 1200:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1201:      state->handCount[player]++;
        -: 1202:    }
        -: 1203:  else
        -: 1204:    {
    #####: 1205:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1206:      state->discardCount[player]++;
        -: 1207:    }
        -: 1208:	
        -: 1209:  //decrease number in supply pile
    #####: 1210:  state->supplyCount[supplyPos]--;
        -: 1211:	 
    #####: 1212:  return 0;
        -: 1213:}
        -: 1214:
       14: 1215:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1216:{
        -: 1217:  int i;
        -: 1218:	
        -: 1219:  //reset coin count
       14: 1220:  state->coins = 0;
        -: 1221:
        -: 1222:  //add coins for each Treasure card in player's hand
       84: 1223:  for (i = 0; i < state->handCount[player]; i++)
        -: 1224:    {
       70: 1225:      if (state->hand[player][i] == copper)
        -: 1226:	{
       56: 1227:	  state->coins += 1;
        -: 1228:	}
       14: 1229:      else if (state->hand[player][i] == silver)
        -: 1230:	{
    #####: 1231:	  state->coins += 2;
        -: 1232:	}
       14: 1233:      else if (state->hand[player][i] == gold)
        -: 1234:	{
    #####: 1235:	  state->coins += 3;
        -: 1236:	}	
        -: 1237:    }	
        -: 1238:
        -: 1239:  //add bonus
       14: 1240:  state->coins += bonus;
        -: 1241:
       14: 1242:  return 0;
        -: 1243:}
        -: 1244:
       14: 1245:int assertTrue(int val1, int val2, int *num) {
       14: 1246:	if (val1 != val2) {
        6: 1247:		printf("VALUES NOT EQUAL -- TEST %d FAILED\n", *num);
        6: 1248:		return 0;
        -: 1249:	}
        -: 1250:	else
        8: 1251:		printf("TEST %d PASSED\n", *num);
        8: 1252:	*num++;
        8: 1253:	return 1;
        -: 1254:}
        -: 1255:
        -: 1256://end of dominion.c
        -: 1257:
---------------------STARTING SMITHY TESTS----------------------
TEST 1: ADDING 3 TREASURE CARDS
Current hand count: 6
Expected hand count: 7
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 2: CHECKING DECK COUNT 
Current deck count: 3
Expected deck count: 2
VALUES NOT EQUAL -- TEST 2 FAILED
----------------------SOME SMITHY TESTS FAILED-----------------------------------
---------------------STARTING ADVENTURER TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 8
Expected hand count: 6
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 3: ENSURE ONLY TREASURE CARDS ADDED
TEST 3 PASSED
----------------------SOME ADVENTURER TESTS FAILED-----------------------------------
---------------------STARTING GREAT HALL TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE ANOTHER ACTION
0
ASSERT FAILED - NOT GRANTED ANOTHER ACTION
----------------------SOME GREAT HALL TESTS FAILED-----------------------------------
---------------------STARTING VILLAGE CARD TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE TWO MORE ACTIONS
NUMBER OF ACTIONS LEFT: 3
TEST 3 PASSED
----------------------ALL VILLAGE CARD TESTS PASSED-----------------------
---------------------STARTING COMPARE TESTS----------------------
TEST 1: 20 GREATER THAN 80
TRUE - TEST PASSED
TEST2: 80 LESS THAN 20
TRUE - TEST PASSED
TEST3: 80 IS EQUAL TO 80
TRUE - TEST PASSED
----------------------ALL COMPARE TESTS PASSED-----------------------
---------------------STARTING NUMHANDCARD TESTS----------------------
TEST 1
STARTING GAME... EXPECTING 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 4 CARDS.
THERE ARE 4 CARDS
TEST PASSED
----------------------ALL NUMHANDCARD TESTS PASSED-----------------------
---------------------STARTING DRAWCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 6 CARDS.
THERE ARE 6 CARDS
TEST PASSED
TEST 3
ADDING 1 CARD. EXPECTING 7 CARDS.
THERE ARE 7 CARDS
TEST PASSED
----------------------ALL DRAWCARD TESTS PASSED-----------------------
---------------------STARTING DISCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
DISCARDING CARD. THERE SHOULD BE 4 CARDS NOW.
YOU HAVE 4 CARDS
DISCARDING CARD. THERE SHOULD BE 3 CARDS NOW.
YOU HAVE 3 CARDS
DISCARDING CARD. THERE SHOULD BE 2 CARDS NOW.
YOU HAVE 2 CARDS
DISCARDING CARD. THERE SHOULD BE 1 CARDS NOW.
YOU HAVE 1 CARDS
DISCARDING CARD. THERE SHOULD BE 0 CARDS NOW.
YOU HAVE 0 CARDS
TEST PASSED
----------------------ALL DISCARD TESTS PASSED-----------------------
File 'cardtest1.c'
Lines executed:96.77% of 31
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "SMITHY"
        -:   10:
        3:   11:int main() {
        -:   12:	//initial values to initialize game
        3:   13:	int seed = 99;
        -:   14:	struct gameState game;
        3:   15:	int choice1 = 1, 
        3:   16:		choice2 = 0, 
        3:   17:		choice3 = 0;
        3:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        3:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        3:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        3:   24:	int currentHandcount = game.handCount[0];
        3:   25:	int currentDeckCount = game.deckCount[0];
        3:   26:	int draw = 3;
        3:   27:	int discard = 1;
        -:   28:
        -:   29:
        3:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        3:   31:	printf("TEST 1: ADDING 3 TREASURE CARDS\n");
        3:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        3:   33:	int assertCount = 1;
        -:   34:
        3:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        3:   37:	cardEffect(smithy, choice1, choice2, choice3, &game, 0, 0);
        3:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        3:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        3:   40:		allAssertsPassed = 0;
        3:   41:	assertCount++;
        -:   42:
        3:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        3:   45:	printf("TEST 2: CHECKING DECK COUNT \n");
        3:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        3:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
        3:   48:		allAssertsPassed = 0;
        -:   49:
        3:   50:	if (allAssertsPassed)
    #####:   51:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   52:	else
        3:   53:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   54:
        3:   55:	return 0;
        -:   56:}
File 'cardtest2.c'
Lines executed:88.57% of 35
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "ADVENTURER"
        -:   10:
        3:   11:int main() {
        -:   12:	//initial values to initialize game
        3:   13:	int seed = 99;
        -:   14:	struct gameState game;
        3:   15:	int choice1 = 1,
        3:   16:		choice2 = 0,
        3:   17:		choice3 = 0;
        3:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        3:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        3:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        3:   24:	int currentHandcount = game.handCount[0];
        3:   25:	int currentDeckCount = game.deckCount[0];
        3:   26:	int draw = 2;
        3:   27:	int discard = 1;
        -:   28:
        -:   29:
        3:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        3:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        3:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        3:   33:	int assertCount = 1;
        -:   34:
        3:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        3:   37:	cardEffect(adventurer, choice1, choice2, choice3, &game, 0, 0);
        3:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        3:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        3:   40:		allAssertsPassed = 0;
        3:   41:	assertCount++;
        -:   42:
        3:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        -:   45:
        3:   46:	printf("TEST 3: ENSURE ONLY TREASURE CARDS ADDED\n");
        3:   47:	int cardDrawn = game.hand[0][game.handCount[0] - 1];
        3:   48:	int cardDrawn2 = game.hand[0][game.handCount[0] - 2];
        3:   49:	if ((cardDrawn != silver && cardDrawn != copper && cardDrawn != gold)
    #####:   50:		&& (cardDrawn2 != silver && cardDrawn2 != copper && cardDrawn2 != gold)) {
    #####:   51:		printf("ASSERT FAILED - NON-TREASURE CARD ADDED\n");
    #####:   52:		allAssertsPassed = 0;
        -:   53:	}
        -:   54:	else
        3:   55:		printf("TEST 3 PASSED\n");
        3:   56:	if (allAssertsPassed)
    #####:   57:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   58:	else
        3:   59:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   60:
        3:   61:	return 0;
        -:   62:}
File 'cardtest3.c'
Lines executed:89.19% of 37
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "GREAT HALL"
        -:   10:
        3:   11:int main() {
        -:   12:	//initial values to initialize game
        3:   13:	int seed = 99;
        -:   14:	struct gameState game;
        3:   15:	int choice1 = 1,
        3:   16:		choice2 = 0,
        3:   17:		choice3 = 0;
        3:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        3:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        3:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        3:   24:	int currentHandcount = game.handCount[0];
        3:   25:	int currentDeckCount = game.deckCount[0];
        3:   26:	int draw = 1;
        3:   27:	int discard = 1;
        -:   28:
        -:   29:
        3:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        3:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        3:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        3:   33:	int assertCount = 1;
        -:   34:
        3:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        3:   37:	cardEffect(great_hall, choice1, choice2, choice3, &game, 0, 0);
        3:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        3:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        3:   41:	assertCount++;
        -:   42:
        3:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        3:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        3:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        3:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        3:   50:	printf("TEST 3: ABLE TO MAKE ANOTHER ACTION\n");
        3:   51:	printf("%d\n", game.numActions);
        3:   52:	if (game.numActions < 1){
        3:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
        3:   54:		allAssertsPassed = 0;
        -:   55:	}
        -:   56:	else
    #####:   57:		printf("TEST 3 PASSED\n");
        -:   58:
        3:   59:	if (allAssertsPassed)
    #####:   60:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   61:	else
        3:   62:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   63:
        3:   64:	return 0;
        -:   65:}
File 'cardtest4.c'
Lines executed:86.49% of 37
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "VILLAGE CARD"
        -:   10:
        3:   11:int main() {
        -:   12:	//initial values to initialize game
        3:   13:	int seed = 99;
        -:   14:	struct gameState game;
        3:   15:	int choice1 = 1,
        3:   16:		choice2 = 0,
        3:   17:		choice3 = 0;
        3:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        3:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        3:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        3:   24:	int currentHandcount = game.handCount[0];
        3:   25:	int currentDeckCount = game.deckCount[0];
        3:   26:	int draw = 1;
        3:   27:	int discard = 1;
        -:   28:
        -:   29:
        3:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        3:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        3:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        3:   33:	int assertCount = 1;
        -:   34:
        3:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        3:   37:	cardEffect(village, choice1, choice2, choice3, &game, 0, 0);
        3:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        3:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        3:   41:	assertCount++;
        -:   42:
        3:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        3:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        3:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        3:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        3:   50:	printf("TEST 3: ABLE TO MAKE TWO MORE ACTIONS\n");
        3:   51:	printf("NUMBER OF ACTIONS LEFT: %d\n", game.numActions);
        3:   52:	if (game.numActions < 2) {
    #####:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
    #####:   54:		allAssertsPassed = 0;
        -:   55:
        -:   56:
        -:   57:	}
        -:   58:	else
        3:   59:		printf("TEST 3 PASSED\n");
        -:   60:
        3:   61:	if (allAssertsPassed)
        3:   62:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   63:	else
    #####:   64:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   65:
        3:   66:	return 0;
        -:   67:}
File 'unittest1.c'
Lines executed:74.07% of 27
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "COMPARE"
        -:   10:
        -:   11:
        3:   12:int main() {
        3:   13:	int eighty = 80;
        3:   14:	int twenty = 20;
        -:   15:
        3:   16:	int allAssertsPassed = 1;
        -:   17:
        3:   18:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        3:   19:	printf("TEST 1: 20 GREATER THAN 80\n");
        -:   20:	
        3:   21:	int t1 = compare(&eighty, &twenty);
        3:   22:	if (t1 == 1)
        3:   23:		printf("TRUE - TEST PASSED\n");
        -:   24:	else {
    #####:   25:		printf("FALSE - TEST FAILED\n");
    #####:   26:		allAssertsPassed = 0;
        -:   27:	}
        -:   28:
        3:   29:	printf("TEST2: 80 LESS THAN 20\n");
        3:   30:	t1 = compare(&twenty, &eighty);
        3:   31:	if (t1 == -1)
        3:   32:		printf("TRUE - TEST PASSED\n"); 
        -:   33:	else {
    #####:   34:		printf("FALSE - TEST FAILED\n");
    #####:   35:		allAssertsPassed = 0;
        -:   36:	}
        -:   37:	
        3:   38:	printf("TEST3: 80 IS EQUAL TO 80\n");
        3:   39:	t1 = compare(&twenty, &twenty);
        3:   40:	if (t1 == 0)
        3:   41:		printf("TRUE - TEST PASSED\n");
        -:   42:	else {
    #####:   43:		printf("FALSE - TEST FAILED\n");
    #####:   44:		allAssertsPassed = 0;
        -:   45:	}
        -:   46:
        3:   47:	if (allAssertsPassed)
        3:   48:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   49:	else
    #####:   50:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   51:
        3:   52:	return 0;
        -:   53:}
File 'unittest2.c'
Lines executed:80.77% of 26
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "NUMHANDCARD"
        -:   10:
        -:   11:
        3:   12:int main() {
        3:   13:	int allAssertsPassed = 1; 
        3:   14:	int seed = 99;
        -:   15:	struct gameState game;
        3:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        3:   17:	int numPlayers = 2;
        -:   18:
        3:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        3:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        3:   22:	printf("TEST 1\n");
        3:   23:	printf("STARTING GAME... EXPECTING 5 CARDS IN HAND.\n");
        3:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        3:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        3:   29:	else printf("TEST PASSED\n");
        -:   30:	
        3:   31:	printf("TEST 2\n");
        3:   32:	printf("ADDING 1 CARD. EXPECTING 4 CARDS.\n");
        3:   33:	discardCard(0, 0, &game, 0);
        3:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        3:   35:	if (game.handCount[0] != 4) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        3:   39:	else printf("TEST PASSED\n");
        3:   40:	if (allAssertsPassed)
        3:   41:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   42:	else
    #####:   43:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   44:
        3:   45:	return 0;
        -:   46:}
File 'unittest3.c'
Lines executed:79.41% of 34
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DRAWCARD"
        -:   10:
        -:   11:
        3:   12:int main() {
        3:   13:	int allAssertsPassed = 1;
        3:   14:	int seed = 99;
        -:   15:	struct gameState game;
        3:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        3:   17:	int numPlayers = 2;
        -:   18:
        3:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        3:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        3:   22:	printf("TEST 1\n");
        3:   23:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        3:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        3:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        3:   29:	else printf("TEST PASSED\n");
        -:   30:
        3:   31:	printf("TEST 2\n");
        3:   32:	printf("ADDING 1 CARD. EXPECTING 6 CARDS.\n");
        3:   33:	drawCard(0, &game);
        3:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        3:   35:	if (game.handCount[0] != 6) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        3:   39:	else printf("TEST PASSED\n");
        -:   40:
        3:   41:	printf("TEST 3\n");
        3:   42:	printf("ADDING 1 CARD. EXPECTING 7 CARDS.\n");
        3:   43:	drawCard(0, &game);
        3:   44:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        3:   45:	if (game.handCount[0] != 7) {
    #####:   46:		allAssertsPassed = 0;
    #####:   47:		printf("TEST FAILED\n");
        -:   48:	}
        3:   49:	else printf("TEST PASSED\n");
        -:   50:
        3:   51:	if (allAssertsPassed)
        3:   52:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   53:	else
    #####:   54:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   55:
        3:   56:	return 0;
        -:   57:}
File 'unittest4.c'
Lines executed:88.46% of 26
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DISCARD"
        -:   10:
        3:   11:int main() {
        3:   12:	int allAssertsPassed = 1;
        3:   13:	int seed = 99;
        -:   14:	struct gameState game;
        3:   15:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        3:   16:	int numPlayers = 2;
        -:   17:
        3:   18:	initializeGame(numPlayers, k, seed, &game);
        -:   19:
        3:   20:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        3:   21:	printf("TEST 1\n");
        3:   22:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        3:   23:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        -:   24:	
        3:   25:	int expected = 4;
        3:   26:	int sameVal = 1;
        -:   27:
       21:   28:	while (game.handCount[0] > 0) {
       15:   29:		printf("DISCARDING CARD. THERE SHOULD BE %d CARDS NOW.\n", expected);
       15:   30:		discardCard(0, 0, &game, 0);
       15:   31:		printf("YOU HAVE %d CARDS\n", game.handCount[0]);
       15:   32:		if (game.handCount[0] != expected) {
    #####:   33:			sameVal = 0;
    #####:   34:			allAssertsPassed = 0;
        -:   35:		}
       15:   36:		expected--;
        -:   37:
        -:   38:	}
        -:   39:
        3:   40:	if (sameVal)
        3:   41:		printf("TEST PASSED\n");
        -:   42:
        3:   43:	if (allAssertsPassed)
        3:   44:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   45:	else
    #####:   46:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   47:
        3:   48:	return 0;
        -:   49:}
File 'dominion.c'
Lines executed:24.33% of 522
Branches executed:25.06% of 387
Taken at least once:16.80% of 387
Calls executed:16.87% of 83
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:24
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
function compare called 639 returned 100% blocks executed 100%
      639:    9:int compare(const void* a, const void* b) {
      639:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        3:   11:    return 1;
      636:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      171:   13:    return -1;
      465:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 21 returned 100% blocks executed 88%
       21:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
       21:   45:  SelectStream(1);
call    0 returned 100%
       21:   46:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:  
        -:   48:  //check number of players
       21:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       21:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      231:   58:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
     2310:   60:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
     2100:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       21:   74:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:    {
       21:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       21:   88:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   89:    {
       21:   90:      state->supplyCount[estate] = 8;
       21:   91:      state->supplyCount[duchy] = 8;
       21:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       21:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       21:  103:  state->supplyCount[silver] = 40;
       21:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      441:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:    {
     3465:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:	{
     3255:  111:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      210:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  115:		{
       42:  116:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       21:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
      189:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      210:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     3045:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       63:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  140:    {
       42:  141:      state->deckCount[i] = 0;
      168:  142:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:	{
      126:  144:	  state->deck[i][j] = estate;
      126:  145:	  state->deckCount[i]++;
        -:  146:	}
      336:  147:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  148:	{
      294:  149:	  state->deck[i][j] = copper;
      294:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       63:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  156:    {
       42:  157:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
       63:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       42:  167:      state->handCount[i] = 0;
       42:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      588:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  178:    {
      567:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       21:  183:  state->outpostPlayed = 0;
       21:  184:  state->phase = 0;
       21:  185:  state->numActions = 1;
       21:  186:  state->numBuys = 1;
       21:  187:  state->playedCardCount = 0;
       21:  188:  state->whoseTurn = 0;
       21:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
      126:  193:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      105:  194:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  195:  }
        -:  196:
       21:  197:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  198:
       21:  199:  return 0;
        -:  200:}
        -:  201:
function shuffle called 42 returned 100% blocks executed 94%
       42:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       42:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       42:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       42:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      504:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      420:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      420:  216:    newDeck[newDeckPos] = state->deck[player][card];
      420:  217:    newDeckPos++;
     1302:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
      882:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      420:  221:    state->deckCount[player]--;
        -:  222:  }
      462:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      420:  224:    state->deck[player][i] = newDeck[i];
      420:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       42:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 12 returned 100% blocks executed 100%
       12:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 135 returned 100% blocks executed 38%
      135:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      135:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      135:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      135:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      135:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      135:  576:    state->deckCount[player]--;
      135:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      135:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 12 returned 100% blocks executed 6%
       12:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       12:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       12:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       12:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       12:  660:  int z = 0;// this is the counter for the temp hand
       12:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  //uses switch to select card and perform actions
       12:  665:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  666:    {
        -:  667:    case adventurer:
        3:  668:		adventurerCard(drawntreasure, currentPlayer, state);
call    0 returned 100%
        3:  669:      return 0;
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
call    0 never executed
        -:  687:	    }
        -:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  708:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
        -:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  717:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
        -:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
        -:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  753:
    #####:  754:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  755:	{
    #####:  756:	  return -1;
        -:  757:	}
        -:  758:		
    #####:  759:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  760:	{
    #####:  761:	  return -1;
        -:  762:	}
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:			
    #####:  784:      return 0;
        -:  785:			
        -:  786:    case remodel:
    #####:  787:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  788:
    #####:  789:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  795:
        -:  796:      //discard card from hand
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:
        -:  799:      //discard trashed card
    #####:  800:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  803:	    {
    #####:  804:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  805:	      break;
        -:  806:	    }
        -:  807:	}
        -:  808:
        -:  809:
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case smithy:
        3:  813:		smithyCard(handPos, currentPlayer, state);
call    0 returned 100%
        3:  814:      return 0;
        -:  815:	
        -:  816:
        -:  817:    case village:
        3:  818:		villageCard(handPos, currentPlayer, state);
call    0 returned 100%
        3:  819:      return 0;
        -:  820:		
        -:  821:    case baron:
    #####:  822:      state->numBuys++;//Increase buys by 1!
    #####:  823:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  824:	int p = 0;//Iterator for hand!
    #####:  825:	int card_not_discarded = 1;//Flag for discard set!
    #####:  826:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  827:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  828:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  829:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  830:	    state->discardCount[currentPlayer]++;
    #####:  831:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  832:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  833:	    }
    #####:  834:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  835:	    state->handCount[currentPlayer]--;
    #####:  836:	    card_not_discarded = 0;//Exit the loop
        -:  837:	  }
    #####:  838:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  839:	    if(DEBUG) {
        -:  840:	      printf("No estate cards in your hand, invalid choice\n");
        -:  841:	      printf("Must gain an estate if there are any\n");
        -:  842:	    }
    #####:  843:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  845:	      state->supplyCount[estate]--;//Decrement estates
    #####:  846:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:		isGameOver(state);
call    0 never executed
        -:  848:	      }
        -:  849:	    }
    #####:  850:	    card_not_discarded = 0;//Exit the loop
        -:  851:	  }
        -:  852:			    
        -:  853:	  else{
    #####:  854:	    p++;//Next card
        -:  855:	  }
        -:  856:	}
        -:  857:      }
        -:  858:			    
        -:  859:      else{
    #####:  860:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  862:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  863:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  864:	    isGameOver(state);
call    0 never executed
        -:  865:	  }
        -:  866:	}
        -:  867:      }
        -:  868:	    
        -:  869:      
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case great_hall:
        3:  873:		greatHallCard(handPos, currentPlayer, state);
call    0 returned 100%
        3:  874:      return 0;
        -:  875:		
        -:  876:    case minion:
    #####:  877:		minionCard(choice1, choice2, handPos, currentPlayer, state);
call    0 never executed
    #####:  878:        return 0;
        -:  879:		
        -:  880:    case steward:
    #####:  881:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  882:	{
        -:  883:	  //+2 cards
    #####:  884:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  885:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  886:	}
    #####:  887:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  888:	{
        -:  889:	  //+2 coins
    #####:  890:	  state->coins = state->coins + 2;
        -:  891:	}
        -:  892:      else
        -:  893:	{
        -:  894:	  //trash 2 cards in hand
    #####:  895:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  896:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  897:	}
        -:  898:			
        -:  899:      //discard card from hand
    #####:  900:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  901:      return 0;
        -:  902:		
        -:  903:    case tribute:
    #####:  904:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  905:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  906:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  907:	  state->deckCount[nextPlayer]--;
        -:  908:	}
    #####:  909:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  910:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  911:	  state->discardCount[nextPlayer]--;
        -:  912:	}
        -:  913:	else{
        -:  914:	  //No Card to Reveal
        -:  915:	  if (DEBUG){
        -:  916:	    printf("No cards to reveal\n");
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:	    
        -:  921:      else{
    #####:  922:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  923:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  924:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  925:	    state->deckCount[nextPlayer]++;
    #####:  926:	    state->discard[nextPlayer][i] = -1;
    #####:  927:	    state->discardCount[nextPlayer]--;
        -:  928:	  }
        -:  929:			    
    #####:  930:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  931:	} 
    #####:  932:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  934:	state->deckCount[nextPlayer]--;
    #####:  935:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
        -:  938:      }    
        -:  939:		       
    #####:  940:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  941:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  942:	state->playedCardCount++;
    #####:  943:	tributeRevealedCards[1] = -1;
        -:  944:      }
        -:  945:
    #####:  946:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  947:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  948:	  state->coins += 2;
        -:  949:	}
        -:  950:		    
    #####:  951:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  952:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  953:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  954:	}
        -:  955:	else{//Action Card
    #####:  956:	  state->numActions = state->numActions + 2;
        -:  957:	}
        -:  958:      }
        -:  959:	    
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case ambassador:
    #####:  963:      j = 0;		//used to check if player has enough cards to discard
        -:  964:
    #####:  965:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
    #####:  970:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  971:	{
    #####:  972:	  return -1;
        -:  973:	}
        -:  974:
    #####:  975:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  978:	    {
    #####:  979:	      j++;
        -:  980:	    }
        -:  981:	}
    #####:  982:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  return -1;				
        -:  985:	}
        -:  986:
        -:  987:      if (DEBUG) 
        -:  988:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  989:
        -:  990:      //increase supply count for choosen card by amount being discarded
    #####:  991:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  992:			
        -:  993:      //each other player gains a copy of revealed card
    #####:  994:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  997:	    {
    #####:  998:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  999:	    }
        -: 1000:	}
        -: 1001:
        -: 1002:      //discard played card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1004:
        -: 1005:      //trash copies of cards returned to supply
    #####: 1006:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1009:	    {
    #####: 1010:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1011:		{
    #####: 1012:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1013:		  break;
        -: 1014:		}
        -: 1015:	    }
        -: 1016:	}			
        -: 1017:
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case cutpurse:
        -: 1021:
    #####: 1022:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1023:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1024:	{
    #####: 1025:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1026:	    {
    #####: 1027:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1028:		{
    #####: 1029:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1030:		    {
    #####: 1031:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1032:		      break;
        -: 1033:		    }
    #####: 1034:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1035:		    {
    #####: 1036:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1037:			{
        -: 1038:			  if (DEBUG)
        -: 1039:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1040:			}	
    #####: 1041:		      break;
        -: 1042:		    }		
        -: 1043:		}
        -: 1044:					
        -: 1045:	    }
        -: 1046:				
        -: 1047:	}				
        -: 1048:
        -: 1049:      //discard played card from hand
    #####: 1050:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1051:
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:		
        -: 1055:    case embargo: 
        -: 1056:      //+2 Coins
    #####: 1057:      state->coins = state->coins + 2;
        -: 1058:			
        -: 1059:      //see if selected pile is in play
    #####: 1060:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  return -1;
        -: 1063:	}
        -: 1064:			
        -: 1065:      //add embargo token to selected supply pile
    #####: 1066:      state->embargoTokens[choice1]++;
        -: 1067:			
        -: 1068:      //trash card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case outpost:
        -: 1073:      //set outpost flag
    #####: 1074:      state->outpostPlayed++;
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case salvager:
        -: 1081:      //+1 buy
    #####: 1082:      state->numBuys++;
        -: 1083:			
    #####: 1084:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1085:	{
        -: 1086:	  //gain coins equal to trashed card
    #####: 1087:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1088:	  //trash card
    #####: 1089:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1090:	}
        -: 1091:			
        -: 1092:      //discard card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case sea_hag:
    #####: 1097:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1098:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1099:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1100:	  state->discardCount[i]++;
    #####: 1101:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1102:	}
        -: 1103:      }
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case treasure_map:
        -: 1107:      //search hand for another treasure_map
    #####: 1108:      index = -1;
    #####: 1109:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	    {
    #####: 1113:	      index = i;
    #####: 1114:	      break;
        -: 1115:	    }
        -: 1116:	}
    #####: 1117:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
        -: 1119:	  //trash both treasure cards
    #####: 1120:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1122:
        -: 1123:	  //gain 4 Gold cards
    #####: 1124:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1127:	    }
        -: 1128:				
        -: 1129:	  //return success
    #####: 1130:	  return 1;
        -: 1131:	}
        -: 1132:			
        -: 1133:      //no second treasure_map found in hand
    #####: 1134:      return -1;
        -: 1135:    }
        -: 1136:	
    #####: 1137:  return -1;
        -: 1138:}
        -: 1139:
        -: 1140:
function discardCard called 27 returned 100% blocks executed 89%
       27: 1141:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -: 1142:	
        -: 1143:  //if card is not trashed, added to Played pile 
       27: 1144:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1145:    {
        -: 1146:      //add card to played pile
       27: 1147:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       27: 1148:      state->playedCardCount++;
        -: 1149:    }
        -: 1150:	
        -: 1151:  //set played card to -1
       27: 1152:  state->hand[currentPlayer][handPos] = -1;
        -: 1153:	
        -: 1154:  //remove card from player's hand
       27: 1155:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
        3: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
       24: 1160:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1161:    {
        -: 1162:      //reduce number of cards in hand
    #####: 1163:      state->handCount[currentPlayer]--;
        -: 1164:    }
        -: 1165:  else 	
        -: 1166:    {
        -: 1167:      //replace discarded card with last card in hand
       24: 1168:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1169:      //set last card to -1
       24: 1170:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1171:      //reduce number of cards in hand
       24: 1172:      state->handCount[currentPlayer]--;
        -: 1173:    }
        -: 1174:	
       27: 1175:  return 0;
        -: 1176:}
        -: 1177:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1178:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1179:{
        -: 1180:  //Note: supplyPos is enum of choosen card
        -: 1181:	
        -: 1182:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1183:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1184:    {
    #####: 1185:      return -1;
        -: 1186:    }
        -: 1187:	
        -: 1188:  //added card for [whoseTurn] current player:
        -: 1189:  // toFlag = 0 : add to discard
        -: 1190:  // toFlag = 1 : add to deck
        -: 1191:  // toFlag = 2 : add to hand
        -: 1192:
    #####: 1193:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1194:    {
    #####: 1195:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1196:      state->deckCount[player]++;
        -: 1197:    }
    #####: 1198:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1201:      state->handCount[player]++;
        -: 1202:    }
        -: 1203:  else
        -: 1204:    {
    #####: 1205:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1206:      state->discardCount[player]++;
        -: 1207:    }
        -: 1208:	
        -: 1209:  //decrease number in supply pile
    #####: 1210:  state->supplyCount[supplyPos]--;
        -: 1211:	 
    #####: 1212:  return 0;
        -: 1213:}
        -: 1214:
function updateCoins called 21 returned 100% blocks executed 82%
       21: 1215:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1216:{
        -: 1217:  int i;
        -: 1218:	
        -: 1219:  //reset coin count
       21: 1220:  state->coins = 0;
        -: 1221:
        -: 1222:  //add coins for each Treasure card in player's hand
      126: 1223:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1224:    {
      105: 1225:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1226:	{
       84: 1227:	  state->coins += 1;
        -: 1228:	}
       21: 1229:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1230:	{
    #####: 1231:	  state->coins += 2;
        -: 1232:	}
       21: 1233:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1234:	{
    #####: 1235:	  state->coins += 3;
        -: 1236:	}	
        -: 1237:    }	
        -: 1238:
        -: 1239:  //add bonus
       21: 1240:  state->coins += bonus;
        -: 1241:
       21: 1242:  return 0;
        -: 1243:}
        -: 1244:
function assertTrue called 21 returned 100% blocks executed 100%
       21: 1245:int assertTrue(int val1, int val2, int *num) {
       21: 1246:	if (val1 != val2) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        9: 1247:		printf("VALUES NOT EQUAL -- TEST %d FAILED\n", *num);
call    0 returned 100%
        9: 1248:		return 0;
        -: 1249:	}
        -: 1250:	else
       12: 1251:		printf("TEST %d PASSED\n", *num);
call    0 returned 100%
       12: 1252:	*num++;
       12: 1253:	return 1;
        -: 1254:}
        -: 1255:
        -: 1256://end of dominion.c
        -: 1257:
---------------------STARTING SMITHY TESTS----------------------
TEST 1: ADDING 3 TREASURE CARDS
Current hand count: 6
Expected hand count: 7
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 2: CHECKING DECK COUNT 
Current deck count: 3
Expected deck count: 2
VALUES NOT EQUAL -- TEST 2 FAILED
----------------------SOME SMITHY TESTS FAILED-----------------------------------
---------------------STARTING ADVENTURER TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 8
Expected hand count: 6
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 3: ENSURE ONLY TREASURE CARDS ADDED
TEST 3 PASSED
----------------------SOME ADVENTURER TESTS FAILED-----------------------------------
---------------------STARTING GREAT HALL TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE ANOTHER ACTION
0
ASSERT FAILED - NOT GRANTED ANOTHER ACTION
----------------------SOME GREAT HALL TESTS FAILED-----------------------------------
---------------------STARTING VILLAGE CARD TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE TWO MORE ACTIONS
NUMBER OF ACTIONS LEFT: 3
TEST 3 PASSED
----------------------ALL VILLAGE CARD TESTS PASSED-----------------------
---------------------STARTING COMPARE TESTS----------------------
TEST 1: 20 GREATER THAN 80
TRUE - TEST PASSED
TEST2: 80 LESS THAN 20
TRUE - TEST PASSED
TEST3: 80 IS EQUAL TO 80
TRUE - TEST PASSED
----------------------ALL COMPARE TESTS PASSED-----------------------
---------------------STARTING NUMHANDCARD TESTS----------------------
TEST 1
STARTING GAME... EXPECTING 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 4 CARDS.
THERE ARE 4 CARDS
TEST PASSED
----------------------ALL NUMHANDCARD TESTS PASSED-----------------------
---------------------STARTING DRAWCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 6 CARDS.
THERE ARE 6 CARDS
TEST PASSED
TEST 3
ADDING 1 CARD. EXPECTING 7 CARDS.
THERE ARE 7 CARDS
TEST PASSED
----------------------ALL DRAWCARD TESTS PASSED-----------------------
---------------------STARTING DISCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
DISCARDING CARD. THERE SHOULD BE 4 CARDS NOW.
YOU HAVE 4 CARDS
DISCARDING CARD. THERE SHOULD BE 3 CARDS NOW.
YOU HAVE 3 CARDS
DISCARDING CARD. THERE SHOULD BE 2 CARDS NOW.
YOU HAVE 2 CARDS
DISCARDING CARD. THERE SHOULD BE 1 CARDS NOW.
YOU HAVE 1 CARDS
DISCARDING CARD. THERE SHOULD BE 0 CARDS NOW.
YOU HAVE 0 CARDS
TEST PASSED
----------------------ALL DISCARD TESTS PASSED-----------------------
File 'cardtest1.c'
Lines executed:96.77% of 31
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "SMITHY"
        -:   10:
        4:   11:int main() {
        -:   12:	//initial values to initialize game
        4:   13:	int seed = 99;
        -:   14:	struct gameState game;
        4:   15:	int choice1 = 1, 
        4:   16:		choice2 = 0, 
        4:   17:		choice3 = 0;
        4:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        4:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        4:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        4:   24:	int currentHandcount = game.handCount[0];
        4:   25:	int currentDeckCount = game.deckCount[0];
        4:   26:	int draw = 3;
        4:   27:	int discard = 1;
        -:   28:
        -:   29:
        4:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        4:   31:	printf("TEST 1: ADDING 3 TREASURE CARDS\n");
        4:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        4:   33:	int assertCount = 1;
        -:   34:
        4:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        4:   37:	cardEffect(smithy, choice1, choice2, choice3, &game, 0, 0);
        4:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        4:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        4:   40:		allAssertsPassed = 0;
        4:   41:	assertCount++;
        -:   42:
        4:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        4:   45:	printf("TEST 2: CHECKING DECK COUNT \n");
        4:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        4:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
        4:   48:		allAssertsPassed = 0;
        -:   49:
        4:   50:	if (allAssertsPassed)
    #####:   51:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   52:	else
        4:   53:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   54:
        4:   55:	return 0;
        -:   56:}
File 'cardtest2.c'
Lines executed:88.57% of 35
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "ADVENTURER"
        -:   10:
        4:   11:int main() {
        -:   12:	//initial values to initialize game
        4:   13:	int seed = 99;
        -:   14:	struct gameState game;
        4:   15:	int choice1 = 1,
        4:   16:		choice2 = 0,
        4:   17:		choice3 = 0;
        4:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        4:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        4:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        4:   24:	int currentHandcount = game.handCount[0];
        4:   25:	int currentDeckCount = game.deckCount[0];
        4:   26:	int draw = 2;
        4:   27:	int discard = 1;
        -:   28:
        -:   29:
        4:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        4:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        4:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        4:   33:	int assertCount = 1;
        -:   34:
        4:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        4:   37:	cardEffect(adventurer, choice1, choice2, choice3, &game, 0, 0);
        4:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        4:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        4:   40:		allAssertsPassed = 0;
        4:   41:	assertCount++;
        -:   42:
        4:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        -:   45:
        4:   46:	printf("TEST 3: ENSURE ONLY TREASURE CARDS ADDED\n");
        4:   47:	int cardDrawn = game.hand[0][game.handCount[0] - 1];
        4:   48:	int cardDrawn2 = game.hand[0][game.handCount[0] - 2];
        4:   49:	if ((cardDrawn != silver && cardDrawn != copper && cardDrawn != gold)
    #####:   50:		&& (cardDrawn2 != silver && cardDrawn2 != copper && cardDrawn2 != gold)) {
    #####:   51:		printf("ASSERT FAILED - NON-TREASURE CARD ADDED\n");
    #####:   52:		allAssertsPassed = 0;
        -:   53:	}
        -:   54:	else
        4:   55:		printf("TEST 3 PASSED\n");
        4:   56:	if (allAssertsPassed)
    #####:   57:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   58:	else
        4:   59:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   60:
        4:   61:	return 0;
        -:   62:}
File 'cardtest3.c'
Lines executed:89.19% of 37
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "GREAT HALL"
        -:   10:
        4:   11:int main() {
        -:   12:	//initial values to initialize game
        4:   13:	int seed = 99;
        -:   14:	struct gameState game;
        4:   15:	int choice1 = 1,
        4:   16:		choice2 = 0,
        4:   17:		choice3 = 0;
        4:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        4:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        4:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        4:   24:	int currentHandcount = game.handCount[0];
        4:   25:	int currentDeckCount = game.deckCount[0];
        4:   26:	int draw = 1;
        4:   27:	int discard = 1;
        -:   28:
        -:   29:
        4:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        4:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        4:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        4:   33:	int assertCount = 1;
        -:   34:
        4:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        4:   37:	cardEffect(great_hall, choice1, choice2, choice3, &game, 0, 0);
        4:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        4:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        4:   41:	assertCount++;
        -:   42:
        4:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        4:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        4:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        4:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        4:   50:	printf("TEST 3: ABLE TO MAKE ANOTHER ACTION\n");
        4:   51:	printf("%d\n", game.numActions);
        4:   52:	if (game.numActions < 1){
        4:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
        4:   54:		allAssertsPassed = 0;
        -:   55:	}
        -:   56:	else
    #####:   57:		printf("TEST 3 PASSED\n");
        -:   58:
        4:   59:	if (allAssertsPassed)
    #####:   60:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   61:	else
        4:   62:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   63:
        4:   64:	return 0;
        -:   65:}
File 'cardtest4.c'
Lines executed:86.49% of 37
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "VILLAGE CARD"
        -:   10:
        4:   11:int main() {
        -:   12:	//initial values to initialize game
        4:   13:	int seed = 99;
        -:   14:	struct gameState game;
        4:   15:	int choice1 = 1,
        4:   16:		choice2 = 0,
        4:   17:		choice3 = 0;
        4:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        4:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        4:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        4:   24:	int currentHandcount = game.handCount[0];
        4:   25:	int currentDeckCount = game.deckCount[0];
        4:   26:	int draw = 1;
        4:   27:	int discard = 1;
        -:   28:
        -:   29:
        4:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        4:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        4:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        4:   33:	int assertCount = 1;
        -:   34:
        4:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        4:   37:	cardEffect(village, choice1, choice2, choice3, &game, 0, 0);
        4:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        4:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        4:   41:	assertCount++;
        -:   42:
        4:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        4:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        4:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        4:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        4:   50:	printf("TEST 3: ABLE TO MAKE TWO MORE ACTIONS\n");
        4:   51:	printf("NUMBER OF ACTIONS LEFT: %d\n", game.numActions);
        4:   52:	if (game.numActions < 2) {
    #####:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
    #####:   54:		allAssertsPassed = 0;
        -:   55:
        -:   56:
        -:   57:	}
        -:   58:	else
        4:   59:		printf("TEST 3 PASSED\n");
        -:   60:
        4:   61:	if (allAssertsPassed)
        4:   62:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   63:	else
    #####:   64:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   65:
        4:   66:	return 0;
        -:   67:}
File 'unittest1.c'
Lines executed:74.07% of 27
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "COMPARE"
        -:   10:
        -:   11:
        4:   12:int main() {
        4:   13:	int eighty = 80;
        4:   14:	int twenty = 20;
        -:   15:
        4:   16:	int allAssertsPassed = 1;
        -:   17:
        4:   18:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        4:   19:	printf("TEST 1: 20 GREATER THAN 80\n");
        -:   20:	
        4:   21:	int t1 = compare(&eighty, &twenty);
        4:   22:	if (t1 == 1)
        4:   23:		printf("TRUE - TEST PASSED\n");
        -:   24:	else {
    #####:   25:		printf("FALSE - TEST FAILED\n");
    #####:   26:		allAssertsPassed = 0;
        -:   27:	}
        -:   28:
        4:   29:	printf("TEST2: 80 LESS THAN 20\n");
        4:   30:	t1 = compare(&twenty, &eighty);
        4:   31:	if (t1 == -1)
        4:   32:		printf("TRUE - TEST PASSED\n"); 
        -:   33:	else {
    #####:   34:		printf("FALSE - TEST FAILED\n");
    #####:   35:		allAssertsPassed = 0;
        -:   36:	}
        -:   37:	
        4:   38:	printf("TEST3: 80 IS EQUAL TO 80\n");
        4:   39:	t1 = compare(&twenty, &twenty);
        4:   40:	if (t1 == 0)
        4:   41:		printf("TRUE - TEST PASSED\n");
        -:   42:	else {
    #####:   43:		printf("FALSE - TEST FAILED\n");
    #####:   44:		allAssertsPassed = 0;
        -:   45:	}
        -:   46:
        4:   47:	if (allAssertsPassed)
        4:   48:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   49:	else
    #####:   50:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   51:
        4:   52:	return 0;
        -:   53:}
File 'unittest2.c'
Lines executed:80.77% of 26
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "NUMHANDCARD"
        -:   10:
        -:   11:
        4:   12:int main() {
        4:   13:	int allAssertsPassed = 1; 
        4:   14:	int seed = 99;
        -:   15:	struct gameState game;
        4:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        4:   17:	int numPlayers = 2;
        -:   18:
        4:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        4:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        4:   22:	printf("TEST 1\n");
        4:   23:	printf("STARTING GAME... EXPECTING 5 CARDS IN HAND.\n");
        4:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        4:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        4:   29:	else printf("TEST PASSED\n");
        -:   30:	
        4:   31:	printf("TEST 2\n");
        4:   32:	printf("ADDING 1 CARD. EXPECTING 4 CARDS.\n");
        4:   33:	discardCard(0, 0, &game, 0);
        4:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        4:   35:	if (game.handCount[0] != 4) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        4:   39:	else printf("TEST PASSED\n");
        4:   40:	if (allAssertsPassed)
        4:   41:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   42:	else
    #####:   43:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   44:
        4:   45:	return 0;
        -:   46:}
File 'unittest3.c'
Lines executed:79.41% of 34
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DRAWCARD"
        -:   10:
        -:   11:
        4:   12:int main() {
        4:   13:	int allAssertsPassed = 1;
        4:   14:	int seed = 99;
        -:   15:	struct gameState game;
        4:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        4:   17:	int numPlayers = 2;
        -:   18:
        4:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        4:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        4:   22:	printf("TEST 1\n");
        4:   23:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        4:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        4:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        4:   29:	else printf("TEST PASSED\n");
        -:   30:
        4:   31:	printf("TEST 2\n");
        4:   32:	printf("ADDING 1 CARD. EXPECTING 6 CARDS.\n");
        4:   33:	drawCard(0, &game);
        4:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        4:   35:	if (game.handCount[0] != 6) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        4:   39:	else printf("TEST PASSED\n");
        -:   40:
        4:   41:	printf("TEST 3\n");
        4:   42:	printf("ADDING 1 CARD. EXPECTING 7 CARDS.\n");
        4:   43:	drawCard(0, &game);
        4:   44:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        4:   45:	if (game.handCount[0] != 7) {
    #####:   46:		allAssertsPassed = 0;
    #####:   47:		printf("TEST FAILED\n");
        -:   48:	}
        4:   49:	else printf("TEST PASSED\n");
        -:   50:
        4:   51:	if (allAssertsPassed)
        4:   52:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   53:	else
    #####:   54:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   55:
        4:   56:	return 0;
        -:   57:}
File 'unittest4.c'
Lines executed:88.46% of 26
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DISCARD"
        -:   10:
        4:   11:int main() {
        4:   12:	int allAssertsPassed = 1;
        4:   13:	int seed = 99;
        -:   14:	struct gameState game;
        4:   15:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        4:   16:	int numPlayers = 2;
        -:   17:
        4:   18:	initializeGame(numPlayers, k, seed, &game);
        -:   19:
        4:   20:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        4:   21:	printf("TEST 1\n");
        4:   22:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        4:   23:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        -:   24:	
        4:   25:	int expected = 4;
        4:   26:	int sameVal = 1;
        -:   27:
       28:   28:	while (game.handCount[0] > 0) {
       20:   29:		printf("DISCARDING CARD. THERE SHOULD BE %d CARDS NOW.\n", expected);
       20:   30:		discardCard(0, 0, &game, 0);
       20:   31:		printf("YOU HAVE %d CARDS\n", game.handCount[0]);
       20:   32:		if (game.handCount[0] != expected) {
    #####:   33:			sameVal = 0;
    #####:   34:			allAssertsPassed = 0;
        -:   35:		}
       20:   36:		expected--;
        -:   37:
        -:   38:	}
        -:   39:
        4:   40:	if (sameVal)
        4:   41:		printf("TEST PASSED\n");
        -:   42:
        4:   43:	if (allAssertsPassed)
        4:   44:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   45:	else
    #####:   46:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   47:
        4:   48:	return 0;
        -:   49:}
File 'cardEffects.c'
Lines executed:61.22% of 49
Branches executed:43.75% of 32
Taken at least once:34.38% of 32
Calls executed:50.00% of 14
Creating 'cardEffects.c.gcov'

File 'dominion.c'
Lines executed:24.33% of 522
Branches executed:25.06% of 387
Taken at least once:16.80% of 387
Calls executed:16.87% of 83
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:32
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
function compare called 852 returned 100% blocks executed 100%
      852:    9:int compare(const void* a, const void* b) {
      852:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4:   11:    return 1;
      848:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      228:   13:    return -1;
      620:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 28 returned 100% blocks executed 88%
       28:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
       28:   45:  SelectStream(1);
call    0 returned 100%
       28:   46:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:  
        -:   48:  //check number of players
       28:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       28:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      308:   58:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
     3080:   60:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
     2800:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       28:   74:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:    {
       28:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       28:   88:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   89:    {
       28:   90:      state->supplyCount[estate] = 8;
       28:   91:      state->supplyCount[duchy] = 8;
       28:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       28:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       28:  103:  state->supplyCount[silver] = 40;
       28:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      588:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:    {
     4620:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:	{
     4340:  111:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      280:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  115:		{
       56:  116:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       28:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
      252:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      280:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     4060:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       84:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  140:    {
       56:  141:      state->deckCount[i] = 0;
      224:  142:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:	{
      168:  144:	  state->deck[i][j] = estate;
      168:  145:	  state->deckCount[i]++;
        -:  146:	}
      448:  147:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  148:	{
      392:  149:	  state->deck[i][j] = copper;
      392:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       84:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  156:    {
       56:  157:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
       84:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       56:  167:      state->handCount[i] = 0;
       56:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      784:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  178:    {
      756:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       28:  183:  state->outpostPlayed = 0;
       28:  184:  state->phase = 0;
       28:  185:  state->numActions = 1;
       28:  186:  state->numBuys = 1;
       28:  187:  state->playedCardCount = 0;
       28:  188:  state->whoseTurn = 0;
       28:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
      168:  193:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      140:  194:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  195:  }
        -:  196:
       28:  197:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  198:
       28:  199:  return 0;
        -:  200:}
        -:  201:
function shuffle called 56 returned 100% blocks executed 94%
       56:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       56:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       56:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       56:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      672:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      560:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      560:  216:    newDeck[newDeckPos] = state->deck[player][card];
      560:  217:    newDeckPos++;
     1736:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
     1176:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      560:  221:    state->deckCount[player]--;
        -:  222:  }
      616:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      560:  224:    state->deck[player][i] = newDeck[i];
      560:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       56:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 16 returned 100% blocks executed 100%
       16:  346:int whoseTurn(struct gameState *state) {
       16:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 180 returned 100% blocks executed 38%
      180:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      180:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      180:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      180:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      180:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      180:  576:    state->deckCount[player]--;
      180:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      180:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 16 returned 100% blocks executed 6%
       16:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       16:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       16:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       16:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       16:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       16:  660:  int z = 0;// this is the counter for the temp hand
       16:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  //uses switch to select card and perform actions
       16:  665:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  666:    {
        -:  667:    case adventurer:
        4:  668:		adventurerCard(drawntreasure, currentPlayer, state);
call    0 returned 100%
        4:  669:      return 0;
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
call    0 never executed
        -:  687:	    }
        -:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  708:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
        -:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  717:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
        -:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
        -:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  753:
    #####:  754:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  755:	{
    #####:  756:	  return -1;
        -:  757:	}
        -:  758:		
    #####:  759:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  760:	{
    #####:  761:	  return -1;
        -:  762:	}
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:			
    #####:  784:      return 0;
        -:  785:			
        -:  786:    case remodel:
    #####:  787:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  788:
    #####:  789:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  795:
        -:  796:      //discard card from hand
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:
        -:  799:      //discard trashed card
    #####:  800:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  803:	    {
    #####:  804:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  805:	      break;
        -:  806:	    }
        -:  807:	}
        -:  808:
        -:  809:
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case smithy:
        4:  813:		smithyCard(handPos, currentPlayer, state);
call    0 returned 100%
        4:  814:      return 0;
        -:  815:	
        -:  816:
        -:  817:    case village:
        4:  818:		villageCard(handPos, currentPlayer, state);
call    0 returned 100%
        4:  819:      return 0;
        -:  820:		
        -:  821:    case baron:
    #####:  822:      state->numBuys++;//Increase buys by 1!
    #####:  823:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  824:	int p = 0;//Iterator for hand!
    #####:  825:	int card_not_discarded = 1;//Flag for discard set!
    #####:  826:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  827:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  828:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  829:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  830:	    state->discardCount[currentPlayer]++;
    #####:  831:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  832:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  833:	    }
    #####:  834:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  835:	    state->handCount[currentPlayer]--;
    #####:  836:	    card_not_discarded = 0;//Exit the loop
        -:  837:	  }
    #####:  838:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  839:	    if(DEBUG) {
        -:  840:	      printf("No estate cards in your hand, invalid choice\n");
        -:  841:	      printf("Must gain an estate if there are any\n");
        -:  842:	    }
    #####:  843:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  845:	      state->supplyCount[estate]--;//Decrement estates
    #####:  846:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:		isGameOver(state);
call    0 never executed
        -:  848:	      }
        -:  849:	    }
    #####:  850:	    card_not_discarded = 0;//Exit the loop
        -:  851:	  }
        -:  852:			    
        -:  853:	  else{
    #####:  854:	    p++;//Next card
        -:  855:	  }
        -:  856:	}
        -:  857:      }
        -:  858:			    
        -:  859:      else{
    #####:  860:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  862:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  863:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  864:	    isGameOver(state);
call    0 never executed
        -:  865:	  }
        -:  866:	}
        -:  867:      }
        -:  868:	    
        -:  869:      
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case great_hall:
        4:  873:		greatHallCard(handPos, currentPlayer, state);
call    0 returned 100%
        4:  874:      return 0;
        -:  875:		
        -:  876:    case minion:
    #####:  877:		minionCard(choice1, choice2, handPos, currentPlayer, state);
call    0 never executed
    #####:  878:        return 0;
        -:  879:		
        -:  880:    case steward:
    #####:  881:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  882:	{
        -:  883:	  //+2 cards
    #####:  884:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  885:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  886:	}
    #####:  887:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  888:	{
        -:  889:	  //+2 coins
    #####:  890:	  state->coins = state->coins + 2;
        -:  891:	}
        -:  892:      else
        -:  893:	{
        -:  894:	  //trash 2 cards in hand
    #####:  895:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  896:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  897:	}
        -:  898:			
        -:  899:      //discard card from hand
    #####:  900:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  901:      return 0;
        -:  902:		
        -:  903:    case tribute:
    #####:  904:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  905:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  906:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  907:	  state->deckCount[nextPlayer]--;
        -:  908:	}
    #####:  909:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  910:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  911:	  state->discardCount[nextPlayer]--;
        -:  912:	}
        -:  913:	else{
        -:  914:	  //No Card to Reveal
        -:  915:	  if (DEBUG){
        -:  916:	    printf("No cards to reveal\n");
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:	    
        -:  921:      else{
    #####:  922:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  923:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  924:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  925:	    state->deckCount[nextPlayer]++;
    #####:  926:	    state->discard[nextPlayer][i] = -1;
    #####:  927:	    state->discardCount[nextPlayer]--;
        -:  928:	  }
        -:  929:			    
    #####:  930:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  931:	} 
    #####:  932:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  934:	state->deckCount[nextPlayer]--;
    #####:  935:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
        -:  938:      }    
        -:  939:		       
    #####:  940:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  941:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  942:	state->playedCardCount++;
    #####:  943:	tributeRevealedCards[1] = -1;
        -:  944:      }
        -:  945:
    #####:  946:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  947:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  948:	  state->coins += 2;
        -:  949:	}
        -:  950:		    
    #####:  951:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  952:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  953:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  954:	}
        -:  955:	else{//Action Card
    #####:  956:	  state->numActions = state->numActions + 2;
        -:  957:	}
        -:  958:      }
        -:  959:	    
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case ambassador:
    #####:  963:      j = 0;		//used to check if player has enough cards to discard
        -:  964:
    #####:  965:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
    #####:  970:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  971:	{
    #####:  972:	  return -1;
        -:  973:	}
        -:  974:
    #####:  975:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  978:	    {
    #####:  979:	      j++;
        -:  980:	    }
        -:  981:	}
    #####:  982:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  return -1;				
        -:  985:	}
        -:  986:
        -:  987:      if (DEBUG) 
        -:  988:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  989:
        -:  990:      //increase supply count for choosen card by amount being discarded
    #####:  991:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  992:			
        -:  993:      //each other player gains a copy of revealed card
    #####:  994:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  997:	    {
    #####:  998:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  999:	    }
        -: 1000:	}
        -: 1001:
        -: 1002:      //discard played card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1004:
        -: 1005:      //trash copies of cards returned to supply
    #####: 1006:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1009:	    {
    #####: 1010:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1011:		{
    #####: 1012:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1013:		  break;
        -: 1014:		}
        -: 1015:	    }
        -: 1016:	}			
        -: 1017:
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case cutpurse:
        -: 1021:
    #####: 1022:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1023:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1024:	{
    #####: 1025:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1026:	    {
    #####: 1027:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1028:		{
    #####: 1029:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1030:		    {
    #####: 1031:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1032:		      break;
        -: 1033:		    }
    #####: 1034:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1035:		    {
    #####: 1036:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1037:			{
        -: 1038:			  if (DEBUG)
        -: 1039:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1040:			}	
    #####: 1041:		      break;
        -: 1042:		    }		
        -: 1043:		}
        -: 1044:					
        -: 1045:	    }
        -: 1046:				
        -: 1047:	}				
        -: 1048:
        -: 1049:      //discard played card from hand
    #####: 1050:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1051:
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:		
        -: 1055:    case embargo: 
        -: 1056:      //+2 Coins
    #####: 1057:      state->coins = state->coins + 2;
        -: 1058:			
        -: 1059:      //see if selected pile is in play
    #####: 1060:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  return -1;
        -: 1063:	}
        -: 1064:			
        -: 1065:      //add embargo token to selected supply pile
    #####: 1066:      state->embargoTokens[choice1]++;
        -: 1067:			
        -: 1068:      //trash card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case outpost:
        -: 1073:      //set outpost flag
    #####: 1074:      state->outpostPlayed++;
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case salvager:
        -: 1081:      //+1 buy
    #####: 1082:      state->numBuys++;
        -: 1083:			
    #####: 1084:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1085:	{
        -: 1086:	  //gain coins equal to trashed card
    #####: 1087:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1088:	  //trash card
    #####: 1089:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1090:	}
        -: 1091:			
        -: 1092:      //discard card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case sea_hag:
    #####: 1097:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1098:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1099:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1100:	  state->discardCount[i]++;
    #####: 1101:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1102:	}
        -: 1103:      }
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case treasure_map:
        -: 1107:      //search hand for another treasure_map
    #####: 1108:      index = -1;
    #####: 1109:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	    {
    #####: 1113:	      index = i;
    #####: 1114:	      break;
        -: 1115:	    }
        -: 1116:	}
    #####: 1117:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
        -: 1119:	  //trash both treasure cards
    #####: 1120:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1122:
        -: 1123:	  //gain 4 Gold cards
    #####: 1124:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1127:	    }
        -: 1128:				
        -: 1129:	  //return success
    #####: 1130:	  return 1;
        -: 1131:	}
        -: 1132:			
        -: 1133:      //no second treasure_map found in hand
    #####: 1134:      return -1;
        -: 1135:    }
        -: 1136:	
    #####: 1137:  return -1;
        -: 1138:}
        -: 1139:
        -: 1140:
function discardCard called 36 returned 100% blocks executed 89%
       36: 1141:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -: 1142:	
        -: 1143:  //if card is not trashed, added to Played pile 
       36: 1144:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1145:    {
        -: 1146:      //add card to played pile
       36: 1147:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       36: 1148:      state->playedCardCount++;
        -: 1149:    }
        -: 1150:	
        -: 1151:  //set played card to -1
       36: 1152:  state->hand[currentPlayer][handPos] = -1;
        -: 1153:	
        -: 1154:  //remove card from player's hand
       36: 1155:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
        4: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
       32: 1160:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1161:    {
        -: 1162:      //reduce number of cards in hand
    #####: 1163:      state->handCount[currentPlayer]--;
        -: 1164:    }
        -: 1165:  else 	
        -: 1166:    {
        -: 1167:      //replace discarded card with last card in hand
       32: 1168:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1169:      //set last card to -1
       32: 1170:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1171:      //reduce number of cards in hand
       32: 1172:      state->handCount[currentPlayer]--;
        -: 1173:    }
        -: 1174:	
       36: 1175:  return 0;
        -: 1176:}
        -: 1177:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1178:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1179:{
        -: 1180:  //Note: supplyPos is enum of choosen card
        -: 1181:	
        -: 1182:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1183:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1184:    {
    #####: 1185:      return -1;
        -: 1186:    }
        -: 1187:	
        -: 1188:  //added card for [whoseTurn] current player:
        -: 1189:  // toFlag = 0 : add to discard
        -: 1190:  // toFlag = 1 : add to deck
        -: 1191:  // toFlag = 2 : add to hand
        -: 1192:
    #####: 1193:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1194:    {
    #####: 1195:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1196:      state->deckCount[player]++;
        -: 1197:    }
    #####: 1198:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1201:      state->handCount[player]++;
        -: 1202:    }
        -: 1203:  else
        -: 1204:    {
    #####: 1205:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1206:      state->discardCount[player]++;
        -: 1207:    }
        -: 1208:	
        -: 1209:  //decrease number in supply pile
    #####: 1210:  state->supplyCount[supplyPos]--;
        -: 1211:	 
    #####: 1212:  return 0;
        -: 1213:}
        -: 1214:
function updateCoins called 28 returned 100% blocks executed 82%
       28: 1215:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1216:{
        -: 1217:  int i;
        -: 1218:	
        -: 1219:  //reset coin count
       28: 1220:  state->coins = 0;
        -: 1221:
        -: 1222:  //add coins for each Treasure card in player's hand
      168: 1223:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1224:    {
      140: 1225:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1226:	{
      112: 1227:	  state->coins += 1;
        -: 1228:	}
       28: 1229:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1230:	{
    #####: 1231:	  state->coins += 2;
        -: 1232:	}
       28: 1233:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1234:	{
    #####: 1235:	  state->coins += 3;
        -: 1236:	}	
        -: 1237:    }	
        -: 1238:
        -: 1239:  //add bonus
       28: 1240:  state->coins += bonus;
        -: 1241:
       28: 1242:  return 0;
        -: 1243:}
        -: 1244:
function assertTrue called 28 returned 100% blocks executed 100%
       28: 1245:int assertTrue(int val1, int val2, int *num) {
       28: 1246:	if (val1 != val2) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
       12: 1247:		printf("VALUES NOT EQUAL -- TEST %d FAILED\n", *num);
call    0 returned 100%
       12: 1248:		return 0;
        -: 1249:	}
        -: 1250:	else
       16: 1251:		printf("TEST %d PASSED\n", *num);
call    0 returned 100%
       16: 1252:	*num++;
       16: 1253:	return 1;
        -: 1254:}
        -: 1255:
        -: 1256://end of dominion.c
        -: 1257:
---------------------STARTING SMITHY TESTS----------------------
TEST 1: ADDING 3 TREASURE CARDS
Current hand count: 6
Expected hand count: 7
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 2: CHECKING DECK COUNT 
Current deck count: 3
Expected deck count: 2
VALUES NOT EQUAL -- TEST 2 FAILED
----------------------SOME SMITHY TESTS FAILED-----------------------------------
---------------------STARTING ADVENTURER TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 8
Expected hand count: 6
VALUES NOT EQUAL -- TEST 1 FAILED
TEST 3: ENSURE ONLY TREASURE CARDS ADDED
TEST 3 PASSED
----------------------SOME ADVENTURER TESTS FAILED-----------------------------------
---------------------STARTING GREAT HALL TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE ANOTHER ACTION
0
ASSERT FAILED - NOT GRANTED ANOTHER ACTION
----------------------SOME GREAT HALL TESTS FAILED-----------------------------------
---------------------STARTING VILLAGE CARD TESTS----------------------
TEST 1: ADDING 2 TREASURE CARDS
Current hand count: 5
Expected hand count: 5
TEST 1 PASSED
TEST 2: CHECKING DECK COUNT
Current deck count: 4
Expected deck count: 4
TEST 2 PASSED
TEST 3: ABLE TO MAKE TWO MORE ACTIONS
NUMBER OF ACTIONS LEFT: 3
TEST 3 PASSED
----------------------ALL VILLAGE CARD TESTS PASSED-----------------------
---------------------STARTING COMPARE TESTS----------------------
TEST 1: 20 GREATER THAN 80
TRUE - TEST PASSED
TEST2: 80 LESS THAN 20
TRUE - TEST PASSED
TEST3: 80 IS EQUAL TO 80
TRUE - TEST PASSED
----------------------ALL COMPARE TESTS PASSED-----------------------
---------------------STARTING NUMHANDCARD TESTS----------------------
TEST 1
STARTING GAME... EXPECTING 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 4 CARDS.
THERE ARE 4 CARDS
TEST PASSED
----------------------ALL NUMHANDCARD TESTS PASSED-----------------------
---------------------STARTING DRAWCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
TEST PASSED
TEST 2
ADDING 1 CARD. EXPECTING 6 CARDS.
THERE ARE 6 CARDS
TEST PASSED
TEST 3
ADDING 1 CARD. EXPECTING 7 CARDS.
THERE ARE 7 CARDS
TEST PASSED
----------------------ALL DRAWCARD TESTS PASSED-----------------------
---------------------STARTING DISCARD TESTS----------------------
TEST 1
STARTING GAME... WITH 5 CARDS IN HAND.
THERE ARE 5 CARDS
DISCARDING CARD. THERE SHOULD BE 4 CARDS NOW.
YOU HAVE 4 CARDS
DISCARDING CARD. THERE SHOULD BE 3 CARDS NOW.
YOU HAVE 3 CARDS
DISCARDING CARD. THERE SHOULD BE 2 CARDS NOW.
YOU HAVE 2 CARDS
DISCARDING CARD. THERE SHOULD BE 1 CARDS NOW.
YOU HAVE 1 CARDS
DISCARDING CARD. THERE SHOULD BE 0 CARDS NOW.
YOU HAVE 0 CARDS
TEST PASSED
----------------------ALL DISCARD TESTS PASSED-----------------------
File 'cardtest1.c'
Lines executed:96.77% of 31
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "SMITHY"
        -:   10:
        5:   11:int main() {
        -:   12:	//initial values to initialize game
        5:   13:	int seed = 99;
        -:   14:	struct gameState game;
        5:   15:	int choice1 = 1, 
        5:   16:		choice2 = 0, 
        5:   17:		choice3 = 0;
        5:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        5:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        5:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        5:   24:	int currentHandcount = game.handCount[0];
        5:   25:	int currentDeckCount = game.deckCount[0];
        5:   26:	int draw = 3;
        5:   27:	int discard = 1;
        -:   28:
        -:   29:
        5:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        5:   31:	printf("TEST 1: ADDING 3 TREASURE CARDS\n");
        5:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        5:   33:	int assertCount = 1;
        -:   34:
        5:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        5:   37:	cardEffect(smithy, choice1, choice2, choice3, &game, 0, 0);
        5:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        5:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        5:   40:		allAssertsPassed = 0;
        5:   41:	assertCount++;
        -:   42:
        5:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        5:   45:	printf("TEST 2: CHECKING DECK COUNT \n");
        5:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        5:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
        5:   48:		allAssertsPassed = 0;
        -:   49:
        5:   50:	if (allAssertsPassed)
    #####:   51:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   52:	else
        5:   53:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   54:
        5:   55:	return 0;
        -:   56:}
File 'cardtest2.c'
Lines executed:88.57% of 35
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "ADVENTURER"
        -:   10:
        5:   11:int main() {
        -:   12:	//initial values to initialize game
        5:   13:	int seed = 99;
        -:   14:	struct gameState game;
        5:   15:	int choice1 = 1,
        5:   16:		choice2 = 0,
        5:   17:		choice3 = 0;
        5:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        5:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        5:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        5:   24:	int currentHandcount = game.handCount[0];
        5:   25:	int currentDeckCount = game.deckCount[0];
        5:   26:	int draw = 2;
        5:   27:	int discard = 1;
        -:   28:
        -:   29:
        5:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        5:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        5:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        5:   33:	int assertCount = 1;
        -:   34:
        5:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        5:   37:	cardEffect(adventurer, choice1, choice2, choice3, &game, 0, 0);
        5:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        5:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        5:   40:		allAssertsPassed = 0;
        5:   41:	assertCount++;
        -:   42:
        5:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        -:   45:
        5:   46:	printf("TEST 3: ENSURE ONLY TREASURE CARDS ADDED\n");
        5:   47:	int cardDrawn = game.hand[0][game.handCount[0] - 1];
        5:   48:	int cardDrawn2 = game.hand[0][game.handCount[0] - 2];
        5:   49:	if ((cardDrawn != silver && cardDrawn != copper && cardDrawn != gold)
    #####:   50:		&& (cardDrawn2 != silver && cardDrawn2 != copper && cardDrawn2 != gold)) {
    #####:   51:		printf("ASSERT FAILED - NON-TREASURE CARD ADDED\n");
    #####:   52:		allAssertsPassed = 0;
        -:   53:	}
        -:   54:	else
        5:   55:		printf("TEST 3 PASSED\n");
        5:   56:	if (allAssertsPassed)
    #####:   57:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   58:	else
        5:   59:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   60:
        5:   61:	return 0;
        -:   62:}
File 'cardtest3.c'
Lines executed:89.19% of 37
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "GREAT HALL"
        -:   10:
        5:   11:int main() {
        -:   12:	//initial values to initialize game
        5:   13:	int seed = 99;
        -:   14:	struct gameState game;
        5:   15:	int choice1 = 1,
        5:   16:		choice2 = 0,
        5:   17:		choice3 = 0;
        5:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        5:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        5:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        5:   24:	int currentHandcount = game.handCount[0];
        5:   25:	int currentDeckCount = game.deckCount[0];
        5:   26:	int draw = 1;
        5:   27:	int discard = 1;
        -:   28:
        -:   29:
        5:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        5:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        5:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        5:   33:	int assertCount = 1;
        -:   34:
        5:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        5:   37:	cardEffect(great_hall, choice1, choice2, choice3, &game, 0, 0);
        5:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        5:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        5:   41:	assertCount++;
        -:   42:
        5:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        5:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        5:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        5:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        5:   50:	printf("TEST 3: ABLE TO MAKE ANOTHER ACTION\n");
        5:   51:	printf("%d\n", game.numActions);
        5:   52:	if (game.numActions < 1){
        5:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
        5:   54:		allAssertsPassed = 0;
        -:   55:	}
        -:   56:	else
    #####:   57:		printf("TEST 3 PASSED\n");
        -:   58:
        5:   59:	if (allAssertsPassed)
    #####:   60:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   61:	else
        5:   62:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   63:
        5:   64:	return 0;
        -:   65:}
File 'cardtest4.c'
Lines executed:86.49% of 37
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "VILLAGE CARD"
        -:   10:
        5:   11:int main() {
        -:   12:	//initial values to initialize game
        5:   13:	int seed = 99;
        -:   14:	struct gameState game;
        5:   15:	int choice1 = 1,
        5:   16:		choice2 = 0,
        5:   17:		choice3 = 0;
        5:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        5:   19:	int numPlayers = 2;
        -:   20:
        -:   21:	//initialize a gamestate. This will be copied and mannipulated for each test.
        5:   22:	initializeGame(numPlayers, k, seed, &game);
        -:   23:
        5:   24:	int currentHandcount = game.handCount[0];
        5:   25:	int currentDeckCount = game.deckCount[0];
        5:   26:	int draw = 1;
        5:   27:	int discard = 1;
        -:   28:
        -:   29:
        5:   30:	printf("---------------------STARTING %s TESTS----------------------\n", CARD);
        5:   31:	printf("TEST 1: ADDING 2 TREASURE CARDS\n");
        5:   32:	int allAssertsPassed = 1; //set to 0 if an assert fails
        5:   33:	int assertCount = 1;
        -:   34:
        5:   35:	int expectedHand = currentHandcount + draw - discard;
        -:   36:
        5:   37:	cardEffect(village, choice1, choice2, choice3, &game, 0, 0);
        5:   38:	printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
        5:   39:	if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
    #####:   40:		allAssertsPassed = 0;
        5:   41:	assertCount++;
        -:   42:
        5:   43:	int expectedDeck = currentDeckCount - draw;
        -:   44:
        5:   45:	printf("TEST 2: CHECKING DECK COUNT\n");
        5:   46:	printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
        5:   47:	if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   48:		allAssertsPassed = 0;
        -:   49:
        5:   50:	printf("TEST 3: ABLE TO MAKE TWO MORE ACTIONS\n");
        5:   51:	printf("NUMBER OF ACTIONS LEFT: %d\n", game.numActions);
        5:   52:	if (game.numActions < 2) {
    #####:   53:		printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
    #####:   54:		allAssertsPassed = 0;
        -:   55:
        -:   56:
        -:   57:	}
        -:   58:	else
        5:   59:		printf("TEST 3 PASSED\n");
        -:   60:
        5:   61:	if (allAssertsPassed)
        5:   62:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", CARD);
        -:   63:	else
    #####:   64:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", CARD);
        -:   65:
        5:   66:	return 0;
        -:   67:}
File 'unittest1.c'
Lines executed:74.07% of 27
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "COMPARE"
        -:   10:
        -:   11:
        5:   12:int main() {
        5:   13:	int eighty = 80;
        5:   14:	int twenty = 20;
        -:   15:
        5:   16:	int allAssertsPassed = 1;
        -:   17:
        5:   18:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        5:   19:	printf("TEST 1: 20 GREATER THAN 80\n");
        -:   20:	
        5:   21:	int t1 = compare(&eighty, &twenty);
        5:   22:	if (t1 == 1)
        5:   23:		printf("TRUE - TEST PASSED\n");
        -:   24:	else {
    #####:   25:		printf("FALSE - TEST FAILED\n");
    #####:   26:		allAssertsPassed = 0;
        -:   27:	}
        -:   28:
        5:   29:	printf("TEST2: 80 LESS THAN 20\n");
        5:   30:	t1 = compare(&twenty, &eighty);
        5:   31:	if (t1 == -1)
        5:   32:		printf("TRUE - TEST PASSED\n"); 
        -:   33:	else {
    #####:   34:		printf("FALSE - TEST FAILED\n");
    #####:   35:		allAssertsPassed = 0;
        -:   36:	}
        -:   37:	
        5:   38:	printf("TEST3: 80 IS EQUAL TO 80\n");
        5:   39:	t1 = compare(&twenty, &twenty);
        5:   40:	if (t1 == 0)
        5:   41:		printf("TRUE - TEST PASSED\n");
        -:   42:	else {
    #####:   43:		printf("FALSE - TEST FAILED\n");
    #####:   44:		allAssertsPassed = 0;
        -:   45:	}
        -:   46:
        5:   47:	if (allAssertsPassed)
        5:   48:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   49:	else
    #####:   50:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   51:
        5:   52:	return 0;
        -:   53:}
File 'unittest2.c'
Lines executed:80.77% of 26
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "NUMHANDCARD"
        -:   10:
        -:   11:
        5:   12:int main() {
        5:   13:	int allAssertsPassed = 1; 
        5:   14:	int seed = 99;
        -:   15:	struct gameState game;
        5:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        5:   17:	int numPlayers = 2;
        -:   18:
        5:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        5:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        5:   22:	printf("TEST 1\n");
        5:   23:	printf("STARTING GAME... EXPECTING 5 CARDS IN HAND.\n");
        5:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        5:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        5:   29:	else printf("TEST PASSED\n");
        -:   30:	
        5:   31:	printf("TEST 2\n");
        5:   32:	printf("ADDING 1 CARD. EXPECTING 4 CARDS.\n");
        5:   33:	discardCard(0, 0, &game, 0);
        5:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        5:   35:	if (game.handCount[0] != 4) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        5:   39:	else printf("TEST PASSED\n");
        5:   40:	if (allAssertsPassed)
        5:   41:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   42:	else
    #####:   43:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   44:
        5:   45:	return 0;
        -:   46:}
File 'unittest3.c'
Lines executed:79.41% of 34
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DRAWCARD"
        -:   10:
        -:   11:
        5:   12:int main() {
        5:   13:	int allAssertsPassed = 1;
        5:   14:	int seed = 99;
        -:   15:	struct gameState game;
        5:   16:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        5:   17:	int numPlayers = 2;
        -:   18:
        5:   19:	initializeGame(numPlayers, k, seed, &game);
        -:   20:
        5:   21:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        5:   22:	printf("TEST 1\n");
        5:   23:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        5:   24:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        5:   25:	if (game.handCount[0] != 5) {
    #####:   26:		allAssertsPassed = 0;
    #####:   27:		printf("TEST FAILED\n");
        -:   28:	}
        5:   29:	else printf("TEST PASSED\n");
        -:   30:
        5:   31:	printf("TEST 2\n");
        5:   32:	printf("ADDING 1 CARD. EXPECTING 6 CARDS.\n");
        5:   33:	drawCard(0, &game);
        5:   34:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        5:   35:	if (game.handCount[0] != 6) {
    #####:   36:		allAssertsPassed = 0;
    #####:   37:		printf("TEST FAILED\n");
        -:   38:	}
        5:   39:	else printf("TEST PASSED\n");
        -:   40:
        5:   41:	printf("TEST 3\n");
        5:   42:	printf("ADDING 1 CARD. EXPECTING 7 CARDS.\n");
        5:   43:	drawCard(0, &game);
        5:   44:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        5:   45:	if (game.handCount[0] != 7) {
    #####:   46:		allAssertsPassed = 0;
    #####:   47:		printf("TEST FAILED\n");
        -:   48:	}
        5:   49:	else printf("TEST PASSED\n");
        -:   50:
        5:   51:	if (allAssertsPassed)
        5:   52:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   53:	else
    #####:   54:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   55:
        5:   56:	return 0;
        -:   57:}
File 'unittest4.c'
Lines executed:88.46% of 26
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define FNAME "DISCARD"
        -:   10:
        5:   11:int main() {
        5:   12:	int allAssertsPassed = 1;
        5:   13:	int seed = 99;
        -:   14:	struct gameState game;
        5:   15:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        5:   16:	int numPlayers = 2;
        -:   17:
        5:   18:	initializeGame(numPlayers, k, seed, &game);
        -:   19:
        5:   20:	printf("---------------------STARTING %s TESTS----------------------\n", FNAME);
        5:   21:	printf("TEST 1\n");
        5:   22:	printf("STARTING GAME... WITH 5 CARDS IN HAND.\n");
        5:   23:	printf("THERE ARE %d CARDS\n", game.handCount[0]);
        -:   24:	
        5:   25:	int expected = 4;
        5:   26:	int sameVal = 1;
        -:   27:
       35:   28:	while (game.handCount[0] > 0) {
       25:   29:		printf("DISCARDING CARD. THERE SHOULD BE %d CARDS NOW.\n", expected);
       25:   30:		discardCard(0, 0, &game, 0);
       25:   31:		printf("YOU HAVE %d CARDS\n", game.handCount[0]);
       25:   32:		if (game.handCount[0] != expected) {
    #####:   33:			sameVal = 0;
    #####:   34:			allAssertsPassed = 0;
        -:   35:		}
       25:   36:		expected--;
        -:   37:
        -:   38:	}
        -:   39:
        5:   40:	if (sameVal)
        5:   41:		printf("TEST PASSED\n");
        -:   42:
        5:   43:	if (allAssertsPassed)
        5:   44:		printf("----------------------ALL %s TESTS PASSED-----------------------\n", FNAME);
        -:   45:	else
    #####:   46:		printf("----------------------SOME %s TESTS FAILED-----------------------------------\n", FNAME);
        -:   47:
        5:   48:	return 0;
        -:   49:}
File 'cardEffects.c'
Lines executed:61.22% of 49
Branches executed:43.75% of 32
Taken at least once:34.38% of 32
Calls executed:50.00% of 14
Creating 'cardEffects.c.gcov'

        -:    0:Source:cardEffects.c
        -:    0:Graph:cardEffects.gcno
        -:    0:Data:cardEffects.gcda
        -:    0:Runs:40
        -:    0:Programs:8
        -:    1:#include "cardEffects.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:
        -:    4:
function adventurerCard called 5 returned 100% blocks executed 93%
        5:    5:int adventurerCard(int drawntreasure, int currentPlayer, struct gameState *state) {
        5:    6:	int z = 0;
        -:    7:	int temphand[MAX_HAND];
       30:    8:	while (drawntreasure<=2) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       20:    9:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:			shuffle(currentPlayer, state);
call    0 never executed
        -:   11:		}
       20:   12:		drawCard(currentPlayer, state);
call    0 returned 100%
       20:   13:		int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
       20:   14:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       15:   15:			drawntreasure++;
        -:   16:		else {
        5:   17:			temphand[z] = cardDrawn;
        5:   18:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        5:   19:			z++;
        -:   20:		}
        -:   21:	}
       15:   22:	while (z - 1 >= 0) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        5:   23:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        5:   24:		z = z - 1;
        -:   25:	}
        5:   26:	return 0;
        -:   27:}
        -:   28:
function smithyCard called 5 returned 100% blocks executed 100%
        5:   29:int smithyCard(int handPos, int currentPlayer, struct gameState *state) {
        -:   30:	int i;
       15:   31:	for (i = 1; i < 3; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   32:	{
       10:   33:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:   34:	}
        -:   35:	
        -:   36:	//discard card from hand
        5:   37:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5:   38:	return 0;
        -:   39:}
        -:   40:
function minionCard called 0 returned 0% blocks executed 0%
    #####:   41:int minionCard(int choice1, int choice2, int handPos, int currentPlayer, struct gameState *state) {
        -:   42:	//+1 action
    #####:   43:	state->numActions++;
        -:   44:
        -:   45:	//discard card from hand
    #####:   46:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:   47:
    #####:   48:	if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:   49:	{
    #####:   50:		state->coins = state->coins + 4;
        -:   51:	}
        -:   52:
    #####:   53:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:   54:	{
        -:   55:		//discard hand
    #####:   56:		while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   57:		{
    #####:   58:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:   59:		}
        -:   60:
        -:   61:		//draw 4
        -:   62:		int i;
    #####:   63:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:   64:		{
    #####:   65:			drawCard(currentPlayer, state);
call    0 never executed
        -:   66:		}
        -:   67:
        -:   68:		//other players discard hand and redraw if hand size > 4
    #####:   69:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:   70:		{
    #####:   71:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:   72:			{
    #####:   73:				if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -:   74:				{
        -:   75:					//discard hand
    #####:   76:					while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -:   77:					{
    #####:   78:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:   79:					}
        -:   80:
        -:   81:					//draw 4
        -:   82:					int j;
    #####:   83:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:   84:					{
    #####:   85:						drawCard(i, state);
call    0 never executed
        -:   86:					}
        -:   87:				}
        -:   88:			}
        -:   89:		}
        -:   90:
        -:   91:	}
    #####:   92:	return 0;
        -:   93:}
        -:   94:
function greatHallCard called 5 returned 100% blocks executed 100%
        5:   95:int greatHallCard(int handPos, int currentPlayer, struct gameState *state){
        -:   96:		//+1 Card
        5:   97:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:   98:
        -:   99:		//+1 Actions
        5:  100:		state->numActions = 0;
        -:  101:
        -:  102:		//discard card from hand
        5:  103:		discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5:  104:		return 0;
        -:  105:}
        -:  106:
function villageCard called 5 returned 100% blocks executed 100%
        5:  107:int villageCard(int handPos, int currentPlayer, struct gameState *state){      
        -:  108:	//+1 Card
        5:  109:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  110:
        -:  111:	//+2 Actions
        5:  112:	state->numActions = state->numActions + 2;
        -:  113:
        -:  114:	//discard played card from hand
        5:  115:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5:  116:	return 0;
        -:  117:}
        -:  118:
File 'dominion.c'
Lines executed:24.33% of 522
Branches executed:25.06% of 387
Taken at least once:16.80% of 387
Calls executed:16.87% of 83
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:40
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
function compare called 1065 returned 100% blocks executed 100%
     1065:    9:int compare(const void* a, const void* b) {
     1065:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        5:   11:    return 1;
     1060:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      285:   13:    return -1;
      775:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 35 returned 100% blocks executed 88%
       35:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
       35:   45:  SelectStream(1);
call    0 returned 100%
       35:   46:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:  
        -:   48:  //check number of players
       35:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       35:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      385:   58:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
     3850:   60:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
     3500:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       35:   74:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:    {
       35:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       35:   88:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   89:    {
       35:   90:      state->supplyCount[estate] = 8;
       35:   91:      state->supplyCount[duchy] = 8;
       35:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       35:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       35:  103:  state->supplyCount[silver] = 40;
       35:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      735:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:    {
     5775:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:	{
     5425:  111:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      350:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  115:		{
       70:  116:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       35:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
      315:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      350:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     5075:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
      105:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  140:    {
       70:  141:      state->deckCount[i] = 0;
      280:  142:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:	{
      210:  144:	  state->deck[i][j] = estate;
      210:  145:	  state->deckCount[i]++;
        -:  146:	}
      560:  147:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  148:	{
      490:  149:	  state->deck[i][j] = copper;
      490:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
      105:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  156:    {
       70:  157:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
      105:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       70:  167:      state->handCount[i] = 0;
       70:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      980:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  178:    {
      945:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       35:  183:  state->outpostPlayed = 0;
       35:  184:  state->phase = 0;
       35:  185:  state->numActions = 1;
       35:  186:  state->numBuys = 1;
       35:  187:  state->playedCardCount = 0;
       35:  188:  state->whoseTurn = 0;
       35:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
      210:  193:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      175:  194:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  195:  }
        -:  196:
       35:  197:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  198:
       35:  199:  return 0;
        -:  200:}
        -:  201:
function shuffle called 70 returned 100% blocks executed 94%
       70:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       70:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       70:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       70:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      840:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      700:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      700:  216:    newDeck[newDeckPos] = state->deck[player][card];
      700:  217:    newDeckPos++;
     2170:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
     1470:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      700:  221:    state->deckCount[player]--;
        -:  222:  }
      770:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      700:  224:    state->deck[player][i] = newDeck[i];
      700:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       70:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 225 returned 100% blocks executed 38%
      225:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      225:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      225:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      225:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      225:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      225:  576:    state->deckCount[player]--;
      225:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      225:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 20 returned 100% blocks executed 6%
       20:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       20:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       20:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       20:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       20:  660:  int z = 0;// this is the counter for the temp hand
       20:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  //uses switch to select card and perform actions
       20:  665:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  666:    {
        -:  667:    case adventurer:
        5:  668:		adventurerCard(drawntreasure, currentPlayer, state);
call    0 returned 100%
        5:  669:      return 0;
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
call    0 never executed
        -:  687:	    }
        -:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  708:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
        -:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  717:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
        -:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
        -:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  753:
    #####:  754:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  755:	{
    #####:  756:	  return -1;
        -:  757:	}
        -:  758:		
    #####:  759:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  760:	{
    #####:  761:	  return -1;
        -:  762:	}
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:			
    #####:  784:      return 0;
        -:  785:			
        -:  786:    case remodel:
    #####:  787:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  788:
    #####:  789:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  795:
        -:  796:      //discard card from hand
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  798:
        -:  799:      //discard trashed card
    #####:  800:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  803:	    {
    #####:  804:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  805:	      break;
        -:  806:	    }
        -:  807:	}
        -:  808:
        -:  809:
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case smithy:
        5:  813:		smithyCard(handPos, currentPlayer, state);
call    0 returned 100%
        5:  814:      return 0;
        -:  815:	
        -:  816:
        -:  817:    case village:
        5:  818:		villageCard(handPos, currentPlayer, state);
call    0 returned 100%
        5:  819:      return 0;
        -:  820:		
        -:  821:    case baron:
    #####:  822:      state->numBuys++;//Increase buys by 1!
    #####:  823:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  824:	int p = 0;//Iterator for hand!
    #####:  825:	int card_not_discarded = 1;//Flag for discard set!
    #####:  826:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  827:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  828:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  829:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  830:	    state->discardCount[currentPlayer]++;
    #####:  831:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  832:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  833:	    }
    #####:  834:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  835:	    state->handCount[currentPlayer]--;
    #####:  836:	    card_not_discarded = 0;//Exit the loop
        -:  837:	  }
    #####:  838:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  839:	    if(DEBUG) {
        -:  840:	      printf("No estate cards in your hand, invalid choice\n");
        -:  841:	      printf("Must gain an estate if there are any\n");
        -:  842:	    }
    #####:  843:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  845:	      state->supplyCount[estate]--;//Decrement estates
    #####:  846:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:		isGameOver(state);
call    0 never executed
        -:  848:	      }
        -:  849:	    }
    #####:  850:	    card_not_discarded = 0;//Exit the loop
        -:  851:	  }
        -:  852:			    
        -:  853:	  else{
    #####:  854:	    p++;//Next card
        -:  855:	  }
        -:  856:	}
        -:  857:      }
        -:  858:			    
        -:  859:      else{
    #####:  860:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  862:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  863:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  864:	    isGameOver(state);
call    0 never executed
        -:  865:	  }
        -:  866:	}
        -:  867:      }
        -:  868:	    
        -:  869:      
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case great_hall:
        5:  873:		greatHallCard(handPos, currentPlayer, state);
call    0 returned 100%
        5:  874:      return 0;
        -:  875:		
        -:  876:    case minion:
    #####:  877:		minionCard(choice1, choice2, handPos, currentPlayer, state);
call    0 never executed
    #####:  878:        return 0;
        -:  879:		
        -:  880:    case steward:
    #####:  881:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  882:	{
        -:  883:	  //+2 cards
    #####:  884:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  885:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  886:	}
    #####:  887:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  888:	{
        -:  889:	  //+2 coins
    #####:  890:	  state->coins = state->coins + 2;
        -:  891:	}
        -:  892:      else
        -:  893:	{
        -:  894:	  //trash 2 cards in hand
    #####:  895:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  896:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  897:	}
        -:  898:			
        -:  899:      //discard card from hand
    #####:  900:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  901:      return 0;
        -:  902:		
        -:  903:    case tribute:
    #####:  904:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  905:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  906:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  907:	  state->deckCount[nextPlayer]--;
        -:  908:	}
    #####:  909:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  910:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  911:	  state->discardCount[nextPlayer]--;
        -:  912:	}
        -:  913:	else{
        -:  914:	  //No Card to Reveal
        -:  915:	  if (DEBUG){
        -:  916:	    printf("No cards to reveal\n");
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:	    
        -:  921:      else{
    #####:  922:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  923:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  924:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  925:	    state->deckCount[nextPlayer]++;
    #####:  926:	    state->discard[nextPlayer][i] = -1;
    #####:  927:	    state->discardCount[nextPlayer]--;
        -:  928:	  }
        -:  929:			    
    #####:  930:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  931:	} 
    #####:  932:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  934:	state->deckCount[nextPlayer]--;
    #####:  935:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
        -:  938:      }    
        -:  939:		       
    #####:  940:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  941:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  942:	state->playedCardCount++;
    #####:  943:	tributeRevealedCards[1] = -1;
        -:  944:      }
        -:  945:
    #####:  946:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  947:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  948:	  state->coins += 2;
        -:  949:	}
        -:  950:		    
    #####:  951:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  952:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  953:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  954:	}
        -:  955:	else{//Action Card
    #####:  956:	  state->numActions = state->numActions + 2;
        -:  957:	}
        -:  958:      }
        -:  959:	    
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case ambassador:
    #####:  963:      j = 0;		//used to check if player has enough cards to discard
        -:  964:
    #####:  965:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
    #####:  970:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  971:	{
    #####:  972:	  return -1;
        -:  973:	}
        -:  974:
    #####:  975:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  978:	    {
    #####:  979:	      j++;
        -:  980:	    }
        -:  981:	}
    #####:  982:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  return -1;				
        -:  985:	}
        -:  986:
        -:  987:      if (DEBUG) 
        -:  988:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  989:
        -:  990:      //increase supply count for choosen card by amount being discarded
    #####:  991:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  992:			
        -:  993:      //each other player gains a copy of revealed card
    #####:  994:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  997:	    {
    #####:  998:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  999:	    }
        -: 1000:	}
        -: 1001:
        -: 1002:      //discard played card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1004:
        -: 1005:      //trash copies of cards returned to supply
    #####: 1006:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1009:	    {
    #####: 1010:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1011:		{
    #####: 1012:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1013:		  break;
        -: 1014:		}
        -: 1015:	    }
        -: 1016:	}			
        -: 1017:
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case cutpurse:
        -: 1021:
    #####: 1022:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1023:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1024:	{
    #####: 1025:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1026:	    {
    #####: 1027:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1028:		{
    #####: 1029:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1030:		    {
    #####: 1031:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1032:		      break;
        -: 1033:		    }
    #####: 1034:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1035:		    {
    #####: 1036:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1037:			{
        -: 1038:			  if (DEBUG)
        -: 1039:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1040:			}	
    #####: 1041:		      break;
        -: 1042:		    }		
        -: 1043:		}
        -: 1044:					
        -: 1045:	    }
        -: 1046:				
        -: 1047:	}				
        -: 1048:
        -: 1049:      //discard played card from hand
    #####: 1050:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1051:
    #####: 1052:      return 0;
        -: 1053:
        -: 1054:		
        -: 1055:    case embargo: 
        -: 1056:      //+2 Coins
    #####: 1057:      state->coins = state->coins + 2;
        -: 1058:			
        -: 1059:      //see if selected pile is in play
    #####: 1060:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  return -1;
        -: 1063:	}
        -: 1064:			
        -: 1065:      //add embargo token to selected supply pile
    #####: 1066:      state->embargoTokens[choice1]++;
        -: 1067:			
        -: 1068:      //trash card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case outpost:
        -: 1073:      //set outpost flag
    #####: 1074:      state->outpostPlayed++;
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case salvager:
        -: 1081:      //+1 buy
    #####: 1082:      state->numBuys++;
        -: 1083:			
    #####: 1084:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1085:	{
        -: 1086:	  //gain coins equal to trashed card
    #####: 1087:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1088:	  //trash card
    #####: 1089:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1090:	}
        -: 1091:			
        -: 1092:      //discard card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case sea_hag:
    #####: 1097:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1098:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1099:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1100:	  state->discardCount[i]++;
    #####: 1101:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1102:	}
        -: 1103:      }
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case treasure_map:
        -: 1107:      //search hand for another treasure_map
    #####: 1108:      index = -1;
    #####: 1109:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	    {
    #####: 1113:	      index = i;
    #####: 1114:	      break;
        -: 1115:	    }
        -: 1116:	}
    #####: 1117:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
        -: 1119:	  //trash both treasure cards
    #####: 1120:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1122:
        -: 1123:	  //gain 4 Gold cards
    #####: 1124:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1127:	    }
        -: 1128:				
        -: 1129:	  //return success
    #####: 1130:	  return 1;
        -: 1131:	}
        -: 1132:			
        -: 1133:      //no second treasure_map found in hand
    #####: 1134:      return -1;
        -: 1135:    }
        -: 1136:	
    #####: 1137:  return -1;
        -: 1138:}
        -: 1139:
        -: 1140:
function discardCard called 45 returned 100% blocks executed 89%
       45: 1141:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -: 1142:	
        -: 1143:  //if card is not trashed, added to Played pile 
       45: 1144:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1145:    {
        -: 1146:      //add card to played pile
       45: 1147:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       45: 1148:      state->playedCardCount++;
        -: 1149:    }
        -: 1150:	
        -: 1151:  //set played card to -1
       45: 1152:  state->hand[currentPlayer][handPos] = -1;
        -: 1153:	
        -: 1154:  //remove card from player's hand
       45: 1155:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
        5: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
       40: 1160:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1161:    {
        -: 1162:      //reduce number of cards in hand
    #####: 1163:      state->handCount[currentPlayer]--;
        -: 1164:    }
        -: 1165:  else 	
        -: 1166:    {
        -: 1167:      //replace discarded card with last card in hand
       40: 1168:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1169:      //set last card to -1
       40: 1170:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1171:      //reduce number of cards in hand
       40: 1172:      state->handCount[currentPlayer]--;
        -: 1173:    }
        -: 1174:	
       45: 1175:  return 0;
        -: 1176:}
        -: 1177:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1178:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1179:{
        -: 1180:  //Note: supplyPos is enum of choosen card
        -: 1181:	
        -: 1182:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1183:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1184:    {
    #####: 1185:      return -1;
        -: 1186:    }
        -: 1187:	
        -: 1188:  //added card for [whoseTurn] current player:
        -: 1189:  // toFlag = 0 : add to discard
        -: 1190:  // toFlag = 1 : add to deck
        -: 1191:  // toFlag = 2 : add to hand
        -: 1192:
    #####: 1193:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1194:    {
    #####: 1195:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1196:      state->deckCount[player]++;
        -: 1197:    }
    #####: 1198:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1201:      state->handCount[player]++;
        -: 1202:    }
        -: 1203:  else
        -: 1204:    {
    #####: 1205:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1206:      state->discardCount[player]++;
        -: 1207:    }
        -: 1208:	
        -: 1209:  //decrease number in supply pile
    #####: 1210:  state->supplyCount[supplyPos]--;
        -: 1211:	 
    #####: 1212:  return 0;
        -: 1213:}
        -: 1214:
function updateCoins called 35 returned 100% blocks executed 82%
       35: 1215:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1216:{
        -: 1217:  int i;
        -: 1218:	
        -: 1219:  //reset coin count
       35: 1220:  state->coins = 0;
        -: 1221:
        -: 1222:  //add coins for each Treasure card in player's hand
      210: 1223:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1224:    {
      175: 1225:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1226:	{
      140: 1227:	  state->coins += 1;
        -: 1228:	}
       35: 1229:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1230:	{
    #####: 1231:	  state->coins += 2;
        -: 1232:	}
       35: 1233:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1234:	{
    #####: 1235:	  state->coins += 3;
        -: 1236:	}	
        -: 1237:    }	
        -: 1238:
        -: 1239:  //add bonus
       35: 1240:  state->coins += bonus;
        -: 1241:
       35: 1242:  return 0;
        -: 1243:}
        -: 1244:
function assertTrue called 35 returned 100% blocks executed 100%
       35: 1245:int assertTrue(int val1, int val2, int *num) {
       35: 1246:	if (val1 != val2) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
       15: 1247:		printf("VALUES NOT EQUAL -- TEST %d FAILED\n", *num);
call    0 returned 100%
       15: 1248:		return 0;
        -: 1249:	}
        -: 1250:	else
       20: 1251:		printf("TEST %d PASSED\n", *num);
call    0 returned 100%
       20: 1252:	*num++;
       20: 1253:	return 1;
        -: 1254:}
        -: 1255:
        -: 1256://end of dominion.c
        -: 1257:
