        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cardEffects.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:#define CARD "GREAT HALL"
        -:   10:
        1:   11:int main() {
        -:   12:	//initial values to initialize game
        1:   13:	int seed = 99;
        -:   14:	struct gameState game;
        1:   15:	int choice1 = 1,
        1:   16:		choice2 = 0,
        1:   17:		choice3 = 0;
        1:   18:	int k[10] = { adventurer, smithy, village, minion, mine, cutpurse, gardens, tribute, feast, outpost };
        -:   19:
        -:   20:
        -:   21:	int t;
        1:   22:	int passed = 1;
       11:   23:	for (t = 0; t < 10; t++) {
       10:   24:		int numPlayers = rand() % 4;
        -:   25:
        -:   26:		//initialize a gamestate. This will be copied and mannipulated for each test.
       10:   27:		initializeGame(numPlayers, k, seed, &game);
        -:   28:
       10:   29:		int currentHandcount = rand() % 10;
       10:   30:		int currentDeckCount = game.deckCount[0];
       10:   31:		int draw = 1;
       10:   32:		int discard = 1;
        -:   33:
        -:   34:
       10:   35:		printf("---------------------STARTING %s TESTS----------------------\n", CARD);
       10:   36:		printf("TEST 1: ADDING 2 TREASURE CARDS\n");
       10:   37:		int allAssertsPassed = 1; //set to 0 if an assert fails
       10:   38:		int assertCount = 1;
        -:   39:
       10:   40:		int expectedHand = currentHandcount + draw - discard;
        -:   41:
       10:   42:		cardEffect(great_hall, choice1, choice2, choice3, &game, 0, 0);
       10:   43:		printf("Current hand count: %d\nExpected hand count: %d\n", game.handCount[0], expectedHand);
       10:   44:		if (!assertTrue(expectedHand, game.handCount[0], &assertCount))
        8:   45:			allAssertsPassed = 0;
       10:   46:		assertCount++;
        -:   47:
       10:   48:		int expectedDeck = currentDeckCount - draw;
        -:   49:
       10:   50:		printf("TEST 2: CHECKING DECK COUNT\n");
       10:   51:		printf("Current deck count: %d\nExpected deck count: %d\n", game.deckCount[0], expectedDeck);
       10:   52:		if (!assertTrue(expectedDeck, game.deckCount[0], &assertCount))
    #####:   53:			allAssertsPassed = 0;
        -:   54:
       10:   55:		printf("TEST 3: ABLE TO MAKE ANOTHER ACTION\n");
       10:   56:		if (game.numActions < 1) {
       10:   57:			printf("ASSERT FAILED - NOT GRANTED ANOTHER ACTION\n");
       10:   58:			allAssertsPassed = 0;
        -:   59:		}
        -:   60:		else
    #####:   61:			printf("TEST 3 PASSED\n");
        -:   62:
       10:   63:		if (!allAssertsPassed)
       10:   64:			passed = 0;
        -:   65:
        -:   66:	}
        1:   67:	if (passed == 0)
        1:   68:		printf("RANDOM TEST FAILED\n");
        -:   69:	else
    #####:   70:		printf("ALL RANDOM TESTS PASSED");
        1:   71:	return 0;
        -:   72:}
