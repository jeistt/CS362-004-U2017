        -:    0:Source:cardEffects.c
        -:    0:Graph:cardEffects.gcno
        -:    0:Data:cardEffects.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "cardEffects.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:
        -:    4:
function adventurerCard called 1 returned 100% blocks executed 93%
        1:    5:int adventurerCard(int drawntreasure, int currentPlayer, struct gameState *state) {
        1:    6:	int z = 0;
        -:    7:	int temphand[MAX_HAND];
        6:    8:	while (drawntreasure<=2) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:    9:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:			shuffle(currentPlayer, state);
call    0 never executed
        -:   11:		}
        4:   12:		drawCard(currentPlayer, state);
call    0 returned 100%
        4:   13:		int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        4:   14:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        3:   15:			drawntreasure++;
        -:   16:		else {
        1:   17:			temphand[z] = cardDrawn;
        1:   18:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:   19:			z++;
        -:   20:		}
        -:   21:	}
        3:   22:	while (z - 1 >= 0) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   23:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        1:   24:		z = z - 1;
        -:   25:	}
        1:   26:	return 0;
        -:   27:}
        -:   28:
function smithyCard called 1 returned 100% blocks executed 100%
        1:   29:int smithyCard(int handPos, int currentPlayer, struct gameState *state) {
        -:   30:	int i;
        3:   31:	for (i = 1; i < 3; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   32:	{
        2:   33:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:   34:	}
        -:   35:	
        -:   36:	//discard card from hand
        1:   37:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:   38:	return 0;
        -:   39:}
        -:   40:
function minionCard called 0 returned 0% blocks executed 0%
    #####:   41:int minionCard(int choice1, int choice2, int handPos, int currentPlayer, struct gameState *state) {
        -:   42:	//+1 action
    #####:   43:	state->numActions++;
        -:   44:
        -:   45:	//discard card from hand
    #####:   46:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:   47:
    #####:   48:	if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:   49:	{
    #####:   50:		state->coins = state->coins + 4;
        -:   51:	}
        -:   52:
    #####:   53:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:   54:	{
        -:   55:		//discard hand
    #####:   56:		while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   57:		{
    #####:   58:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:   59:		}
        -:   60:
        -:   61:		//draw 4
        -:   62:		int i;
    #####:   63:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:   64:		{
    #####:   65:			drawCard(currentPlayer, state);
call    0 never executed
        -:   66:		}
        -:   67:
        -:   68:		//other players discard hand and redraw if hand size > 4
    #####:   69:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:   70:		{
    #####:   71:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:   72:			{
    #####:   73:				if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -:   74:				{
        -:   75:					//discard hand
    #####:   76:					while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -:   77:					{
    #####:   78:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:   79:					}
        -:   80:
        -:   81:					//draw 4
        -:   82:					int j;
    #####:   83:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:   84:					{
    #####:   85:						drawCard(i, state);
call    0 never executed
        -:   86:					}
        -:   87:				}
        -:   88:			}
        -:   89:		}
        -:   90:
        -:   91:	}
    #####:   92:	return 0;
        -:   93:}
        -:   94:
function greatHallCard called 1 returned 100% blocks executed 100%
        1:   95:int greatHallCard(int handPos, int currentPlayer, struct gameState *state){
        -:   96:		//+1 Card
        1:   97:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:   98:
        -:   99:		//+1 Actions
        1:  100:		state->numActions = 0;
        -:  101:
        -:  102:		//discard card from hand
        1:  103:		discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  104:		return 0;
        -:  105:}
        -:  106:
function villageCard called 1 returned 100% blocks executed 100%
        1:  107:int villageCard(int handPos, int currentPlayer, struct gameState *state){      
        -:  108:	//+1 Card
        1:  109:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  110:
        -:  111:	//+2 Actions
        1:  112:	state->numActions = state->numActions + 2;
        -:  113:
        -:  114:	//discard played card from hand
        1:  115:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  116:	return 0;
        -:  117:}
        -:  118:
